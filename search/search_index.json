{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dungeon Master\u2019s Assistant (MVC)","text":"<p>Welcome to the official technical documentation for the Dungeon Master\u2019s Assistant Minimum Viable Campaign (MVC). Use the navigation on the left to jump to:</p> <ul> <li>DMA Plan v2 \u2013 strategic scope</li> <li>Technical Design v2 \u2013 high-level architecture</li> <li>API Design Spec v2 \u2013 public &amp; internal API reference</li> <li>CKB Data Schema v2 \u2013 database model</li> <li>Orchestrator Internal Design v1 \u2013 component-level details</li> </ul>"},{"location":"ckb-data-schema-v2/","title":"Central Knowledge Base (CKB) - Streamlined Data Schema v2.0","text":""},{"location":"ckb-data-schema-v2/#dma-system-data-architecture-mvc-focus","title":"DMA System Data Architecture - MVC Focus","text":""},{"location":"ckb-data-schema-v2/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Architecture Overview </li> <li>Core Entity Schemas </li> <li>Relationship Model </li> <li>Metadata &amp; Versioning </li> <li>Validation &amp; Constraints </li> <li>API Patterns </li> <li>Implementation Guide</li> </ol>"},{"location":"ckb-data-schema-v2/#architecture-overview","title":"Architecture Overview","text":""},{"location":"ckb-data-schema-v2/#storage-strategy","title":"Storage Strategy","text":"<ul> <li>Primary Database: PostgreSQL 15+ with JSONB columns  </li> <li>Extensions: pgvector for future semantic search, pg_trgm for text search  </li> <li>Phase 2 Consideration: Add Neo4j only when graph traversals exceed PostgreSQL recursive CTE performance limits</li> </ul>"},{"location":"ckb-data-schema-v2/#design-principles","title":"Design Principles","text":"<ol> <li>Core vs Extended: Every entity has a minimal \"Core Slice\" (required) and \"Extended Data\" (optional)  </li> <li>Progressive Enhancement: Start simple, add complexity through versioned migrations  </li> <li>Single Source of Truth: One database, one schema, clear ownership</li> </ol>"},{"location":"ckb-data-schema-v2/#schema-version","title":"Schema Version","text":"<ul> <li>Current: 2.0.0 (MVC Release)  </li> <li>Migration Strategy: Flyway or Alembic for version control  </li> <li>Compatibility: Forward-compatible design for future extensions</li> </ul>"},{"location":"ckb-data-schema-v2/#core-entity-schemas","title":"Core Entity Schemas","text":""},{"location":"ckb-data-schema-v2/#base-entity-pattern","title":"Base Entity Pattern","text":"<p>All entities inherit this base structure:</p> <p>interface BaseEntity {</p> <p>// Core Slice - Always Required</p> <p>id: string;           // UUID v4</p> <p>entity_type: string;  // campaign|location|character|item|faction|plotline|encounter|session</p> <p>name: string;         // Max 100 chars</p> <p>description: string;  // Max 500 chars</p> <p>// Metadata - Always Required</p> <p>campaign_id: string;</p> <p>created_at: timestamp;</p> <p>created_by: string;</p> <p>updated_at: timestamp;</p> <p>updated_by: string;</p> <p>version: number;      // Optimistic locking</p> <p>status: 'active' | 'archived' | 'deleted';</p> <p>// Extended Data - Optional JSONB</p> <p>extended_data?: Record\\&lt;string, any&gt;;</p> <p>// Search &amp; Filter</p> <p>tags: string[];       // Simple string array</p> <p>search_vector?: tsvector; // PostgreSQL full-text search</p> <p>}</p>"},{"location":"ckb-data-schema-v2/#1-campaign-entity","title":"1. Campaign Entity","text":"<p>interface Campaign extends BaseEntity {</p> <p>entity_type: 'campaign';</p> <p>// Core Slice</p> <p>setting_name: string;</p> <p>current_date: string;  // In-game date</p> <p>// Extended Data Examples (in JSONB)</p> <p>extended_data?: {</p> <pre><code>genre?: string;\n\ntone?: string;\n\nhouse\\_rules?: Array\\&lt;{name: string, description: string}\\&gt;;\n\ndm\\_notes?: string;\n</code></pre> <p>}</p> <p>}</p> <p>SQL Table:</p> <p>CREATE TABLE campaigns (</p> <p>id UUID PRIMARY KEY DEFAULT gen_random_uuid(),</p> <p>name VARCHAR(100) NOT NULL,</p> <p>description TEXT,</p> <p>setting_name VARCHAR(100) NOT NULL,</p> <p>current_date VARCHAR(50),</p> <p>-- Metadata</p> <p>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</p> <p>created_by UUID NOT NULL,</p> <p>updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</p> <p>updated_by UUID NOT NULL,</p> <p>version INTEGER NOT NULL DEFAULT 1,</p> <p>status VARCHAR(20) NOT NULL DEFAULT 'active',</p> <p>-- Extended &amp; Search</p> <p>extended_data JSONB DEFAULT '{}',</p> <p>tags TEXT[] DEFAULT '{}',</p> <p>search_vector TSVECTOR GENERATED ALWAYS AS (</p> <pre><code>to\\_tsvector('english', coalesce(name,'') || ' ' || coalesce(description,''))\n</code></pre> <p>) STORED,</p> <p>-- Constraints</p> <p>CONSTRAINT campaigns_status_check CHECK (status IN ('active', 'archived', 'deleted'))</p> <p>);</p> <p>CREATE INDEX idx_campaigns_search ON campaigns USING GIN(search_vector);</p> <p>CREATE INDEX idx_campaigns_tags ON campaigns USING GIN(tags);</p> <p>CREATE INDEX idx_campaigns_status ON campaigns(status) WHERE status \\= 'active';</p>"},{"location":"ckb-data-schema-v2/#2-location-entity","title":"2. Location Entity","text":"<p>interface Location extends BaseEntity {</p> <p>entity_type: 'location';</p> <p>// Core Slice</p> <p>location_type: 'continent' | 'kingdom' | 'city' | 'town' | 'dungeon' | 'building' | 'room' | 'wilderness';</p> <p>parent_location_id?: string;  // Hierarchical relationship</p> <p>// Extended Data Examples</p> <p>extended_data?: {</p> <pre><code>population?: number;\n\nclimate?: string;\n\nnotable\\_features?: string\\[\\];\n\ndm\\_notes?: string;\n\nmap\\_coordinates?: {x: number, y: number};\n</code></pre> <p>}</p> <p>}</p>"},{"location":"ckb-data-schema-v2/#3-character-entity","title":"3. Character Entity","text":"<p>interface Character extends BaseEntity {</p> <p>entity_type: 'character';</p> <p>// Core Slice</p> <p>char_type: 'pc' | 'major_npc' | 'minor_npc' | 'monster';</p> <p>level: number;</p> <p>current_location_id?: string;</p> <p>alive: boolean;</p> <p>// Extended Data Examples</p> <p>extended_data?: {</p> <pre><code>race?: string;\n\nclass?: string;\n\nalignment?: string;\n\nstats?: {\n\n  str: number;\n\n  dex: number;\n\n  con: number;\n\n  int: number;\n\n  wis: number;\n\n  cha: number;\n\n};\n\npersonality?: string\\[\\];\n\nbackstory?: string;\n\nportrait\\_url?: string;\n</code></pre> <p>}</p> <p>}</p>"},{"location":"ckb-data-schema-v2/#4-item-entity","title":"4. Item Entity","text":"<p>interface Item extends BaseEntity {</p> <p>entity_type: 'item';</p> <p>// Core Slice  </p> <p>item_type: 'weapon' | 'armor' | 'consumable' | 'treasure' | 'quest_item' | 'other';</p> <p>current_owner_id?: string;</p> <p>current_location_id?: string;</p> <p>quantity: number;</p> <p>// Extended Data Examples</p> <p>extended_data?: {</p> <pre><code>magical?: boolean;\n\nvalue\\_gp?: number;\n\nweight\\_lbs?: number;\n\nproperties?: string\\[\\];\n\ndm\\_notes?: string;\n</code></pre> <p>}</p> <p>}</p>"},{"location":"ckb-data-schema-v2/#5-simplified-entities","title":"5. Simplified Entities","text":"<p>For MVC, these entities use only the base pattern with minimal extensions:</p> <ul> <li>Faction: Just name, description, and influence level in extended_data  </li> <li>Plotline: Title, status (active/complete), and current objective in extended_data  </li> <li>Encounter: Name, difficulty rating, and participant IDs in extended_data  </li> <li>Session: Session number, date, and summary in extended_data</li> </ul>"},{"location":"ckb-data-schema-v2/#relationship-model","title":"Relationship Model","text":""},{"location":"ckb-data-schema-v2/#foreign-key-approach-phase-1","title":"Foreign Key Approach (Phase 1)","text":"<p>Use traditional foreign keys for primary relationships:</p> <p>-- Direct relationships via columns</p> <p>ALTER TABLE characters </p> <p>ADD CONSTRAINT fk_character_location </p> <p>FOREIGN KEY (current_location_id) </p> <p>REFERENCES locations(id);</p> <p>ALTER TABLE items</p> <p>ADD CONSTRAINT fk_item_owner</p> <p>FOREIGN KEY (current_owner_id)</p> <p>REFERENCES characters(id);</p>"},{"location":"ckb-data-schema-v2/#relationship-table-future-option","title":"Relationship Table (Future Option)","text":"<p>For complex many-to-many relationships:</p> <p>CREATE TABLE entity_relationships (</p> <p>id UUID PRIMARY KEY DEFAULT gen_random_uuid(),</p> <p>source_id UUID NOT NULL,</p> <p>source_type VARCHAR(50) NOT NULL,</p> <p>target_id UUID NOT NULL,  </p> <p>target_type VARCHAR(50) NOT NULL,</p> <p>relationship_type VARCHAR(50) NOT NULL,</p> <p>properties JSONB DEFAULT '{}',</p> <p>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</p> <p>CONSTRAINT unique_relationship </p> <pre><code>UNIQUE(source\\_id, target\\_id, relationship\\_type)\n</code></pre> <p>);</p> <p>CREATE INDEX idx_relationships_source ON entity_relationships(source_id, source_type);</p> <p>CREATE INDEX idx_relationships_target ON entity_relationships(target_id, target_type);</p>"},{"location":"ckb-data-schema-v2/#metadata-versioning","title":"Metadata &amp; Versioning","text":""},{"location":"ckb-data-schema-v2/#lightweight-versioning","title":"Lightweight Versioning","text":"<p>Use optimistic locking with version numbers:</p> <p># Pydantic model example</p> <p>class UpdateEntity(BaseModel):</p> <pre><code>id: UUID\n\nversion: int  \\# Must match current version\n\nupdates: Dict\\[str, Any\\]\n</code></pre> <p># Update logic</p> <p>def update_entity(update: UpdateEntity):</p> <pre><code>result \\= db.execute(\"\"\"\n\n    UPDATE entities\n\n    SET data \\= %s, version \\= version \\+ 1\n\n    WHERE id \\= %s AND version \\= %s\n\n    \"\"\", (update.updates, update.id, update.version))\n\n\n\nif result.rowcount \\== 0:\n\n    raise ConcurrentModificationError()\n</code></pre>"},{"location":"ckb-data-schema-v2/#audit-trail-simplified","title":"Audit Trail (Simplified)","text":"<p>Single audit table for all entity changes:</p> <p>CREATE TABLE audit_log (</p> <p>id BIGSERIAL PRIMARY KEY,</p> <p>entity_id UUID NOT NULL,</p> <p>entity_type VARCHAR(50) NOT NULL,</p> <p>operation VARCHAR(20) NOT NULL,</p> <p>user_id UUID NOT NULL,</p> <p>timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</p> <p>changes JSONB,  -- JSON diff of changes</p> <p>-- Partitioned by month for performance</p> <p>) PARTITION BY RANGE (timestamp);</p>"},{"location":"ckb-data-schema-v2/#validation-constraints","title":"Validation &amp; Constraints","text":""},{"location":"ckb-data-schema-v2/#pydantic-models-shared-package","title":"Pydantic Models (Shared Package)","text":"<p># dma_shared_models/entities.py</p> <p>from pydantic import BaseModel, Field, validator</p> <p>from typing import Optional, Literal</p> <p>from uuid import UUID</p> <p>from datetime import datetime</p> <p>class LocationBase(BaseModel):</p> <pre><code>name: str \\= Field(..., min\\_length=1, max\\_length=100)\n\ndescription: str \\= Field(..., max\\_length=500)\n\nlocation\\_type: Literal\\[\n\n    'continent', 'kingdom', 'city', 'town',\n\n    'dungeon', 'building', 'room', 'wilderness'\n\n\\]\n\nparent\\_location\\_id: Optional\\[UUID\\] \\= None\n\n\n\n@validator('name')\n\ndef name\\_not\\_empty(cls, v):\n\n    if not v.strip():\n\n        raise ValueError('Name cannot be empty')\n\n    return v.strip()\n</code></pre> <p>class CharacterBase(BaseModel):</p> <pre><code>name: str \\= Field(..., min\\_length=1, max\\_length=100)\n\ndescription: str \\= Field(..., max\\_length=500)\n\nchar\\_type: Literal\\['pc', 'major\\_npc', 'minor\\_npc', 'monster'\\]\n\nlevel: int \\= Field(default=1, ge=0, le=20)\n\nalive: bool \\= True\n\n\n\nclass Config:\n\n    \\# Allow extended\\_data field\n\n    extra \\= 'allow'\n</code></pre>"},{"location":"ckb-data-schema-v2/#database-constraints","title":"Database Constraints","text":"<p>-- Business rule constraints</p> <p>ALTER TABLE characters </p> <p>ADD CONSTRAINT valid_level CHECK (level &gt;= 0 AND level \\&lt;= 20);</p> <p>ALTER TABLE items</p> <p>ADD CONSTRAINT positive_quantity CHECK (quantity &gt;= 0);</p> <p>-- Ensure referential integrity</p> <p>ALTER TABLE campaigns</p> <p>ADD CONSTRAINT valid_status CHECK (status IN ('active', 'archived', 'deleted'));</p>"},{"location":"ckb-data-schema-v2/#api-patterns","title":"API Patterns","text":""},{"location":"ckb-data-schema-v2/#restful-endpoints","title":"RESTful Endpoints","text":"<p># Core CRUD Operations</p> <p>GET    /api/v1/entities/{type}          # List with filters</p> <p>GET    /api/v1/entities/{type}/{id}     # Get single entity</p> <p>POST   /api/v1/entities/{type}          # Create new</p> <p>PUT    /api/v1/entities/{type}/{id}     # Update (with version)</p> <p>DELETE /api/v1/entities/{type}/{id}     # Soft delete</p> <p># Search Operations  </p> <p>POST   /api/v1/search                   # Full-text search</p> <p>GET    /api/v1/entities/{type}/{id}/related  # Get relationships</p> <p># Fast Lane Operations (bypass event bus)</p> <p>GET    /api/v1/fast/lookup/{rule}       # Rule lookups</p> <p>POST   /api/v1/fast/calculate           # Combat calculations</p>"},{"location":"ckb-data-schema-v2/#query-examples","title":"Query Examples","text":"<p># FastAPI endpoint example</p> <p>@app.get(\"/api/v1/entities/location\")</p> <p>async def list_locations(</p> <pre><code>campaign\\_id: UUID,\n\nlocation\\_type: Optional\\[str\\] \\= None,\n\ntags: Optional\\[List\\[str\\]\\] \\= Query(None),\n\nsearch: Optional\\[str\\] \\= None,\n\nlimit: int \\= Query(100, le=1000),\n\noffset: int \\= 0\n</code></pre> <p>):</p> <pre><code>query \\= \"\"\"\n\n    SELECT \\* FROM locations\n\n    WHERE campaign\\_id \\= %s\n\n    AND status \\= 'active'\n\n\"\"\"\n\nparams \\= \\[campaign\\_id\\]\n\n\n\nif location\\_type:\n\n    query \\+= \" AND location\\_type \\= %s\"\n\n    params.append(location\\_type)\n\n\n\nif tags:\n\n    query \\+= \" AND tags &amp;&amp; %s\"  \\# Array overlap\n\n    params.append(tags)\n\n\n\nif search:\n\n    query \\+= \" AND search\\_vector @@ plainto\\_tsquery('english', %s)\"\n\n    params.append(search)\n\n\n\nquery \\+= \" ORDER BY updated\\_at DESC LIMIT %s OFFSET %s\"\n\nparams.extend(\\[limit, offset\\])\n\n\n\nreturn await db.fetch\\_all(query, params)\n</code></pre>"},{"location":"ckb-data-schema-v2/#implementation-guide","title":"Implementation Guide","text":""},{"location":"ckb-data-schema-v2/#1-database-setup","title":"1. Database Setup","text":"<p>-- Initial setup</p> <p>CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";</p> <p>CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";  -- For fuzzy text search</p> <p>-- Create base tables</p> <p>CREATE TABLE entities (</p> <p>id UUID PRIMARY KEY DEFAULT gen_random_uuid(),</p> <p>entity_type VARCHAR(50) NOT NULL,</p> <p>campaign_id UUID NOT NULL,</p> <p>name VARCHAR(100) NOT NULL,</p> <p>description TEXT,</p> <p>-- Core fields based on type</p> <p>core_data JSONB NOT NULL DEFAULT '{}',</p> <p>-- Extended data</p> <p>extended_data JSONB DEFAULT '{}',</p> <p>-- Metadata</p> <p>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</p> <p>created_by UUID NOT NULL,</p> <p>updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</p> <p>updated_by UUID NOT NULL,</p> <p>version INTEGER NOT NULL DEFAULT 1,</p> <p>status VARCHAR(20) NOT NULL DEFAULT 'active',</p> <p>-- Search</p> <p>tags TEXT[] DEFAULT '{}',</p> <p>search_vector TSVECTOR,</p> <p>-- Indexes</p> <p>CONSTRAINT entities_status_check CHECK (status IN ('active', 'archived', 'deleted'))</p> <p>);</p> <p>-- Performance indexes</p> <p>CREATE INDEX idx_entities_type_campaign ON entities(entity_type, campaign_id);</p> <p>CREATE INDEX idx_entities_search ON entities USING GIN(search_vector);</p> <p>CREATE INDEX idx_entities_tags ON entities USING GIN(tags);</p> <p>CREATE INDEX idx_entities_extended ON entities USING GIN(extended_data);</p>"},{"location":"ckb-data-schema-v2/#2-migration-strategy","title":"2. Migration Strategy","text":"<p># alembic/versions/001_initial_schema.py</p> <p>def upgrade():</p> <pre><code>\\# Create tables\n\nop.create\\_table('entities', ...)\n\n\n\n\\# Add indexes\n\nop.create\\_index('idx\\_entities\\_search', ...)\n\n\n\n\\# Insert seed data\n\nop.bulk\\_insert(entities\\_table, \\[\n\n    {'entity\\_type': 'rule', 'name': 'THAC0', ...},\n\n    {'entity\\_type': 'rule', 'name': 'Saving Throws', ...}\n\n\\])\n</code></pre> <p>def downgrade():</p> <pre><code>op.drop\\_table('entities')\n</code></pre>"},{"location":"ckb-data-schema-v2/#3-repository-pattern","title":"3. Repository Pattern","text":"<p># repositories/entity_repository.py</p> <p>class EntityRepository:</p> <pre><code>def \\_\\_init\\_\\_(self, db: Database):\n\n    self.db \\= db\n\n\n\nasync def create(self, entity: BaseEntity) \\-\\&gt; UUID:\n\n    \"\"\"Create entity with automatic versioning\"\"\"\n\n    query \\= \"\"\"\n\n        INSERT INTO entities\n\n        (entity\\_type, campaign\\_id, name, description,\n\n         core\\_data, extended\\_data, created\\_by, updated\\_by, tags)\n\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n\n        RETURNING id\n\n    \"\"\"\n\n    return await self.db.fetchval(query,\n\n        entity.entity\\_type, entity.campaign\\_id, entity.name,\n\n        entity.description, entity.core\\_data, entity.extended\\_data,\n\n        entity.created\\_by, entity.updated\\_by, entity.tags\n\n    )\n\n\n\nasync def get\\_by\\_id(self, entity\\_id: UUID) \\-\\&gt; Optional\\[Dict\\]:\n\n    \"\"\"Get with caching support\"\"\"\n\n    \\# Check cache first\n\n    cached \\= await redis.get(f\"entity:{entity\\_id}\")\n\n    if cached:\n\n        return json.loads(cached)\n\n\n\n    \\# Database query\n\n    query \\= \"SELECT \\* FROM entities WHERE id \\= $1 AND status \\= 'active'\"\n\n    result \\= await self.db.fetchrow(query, entity\\_id)\n\n\n\n    if result:\n\n        \\# Cache for 5 minutes\n\n        await redis.setex(f\"entity:{entity\\_id}\", 300, json.dumps(dict(result)))\n\n\n\n    return dict(result) if result else None\n</code></pre>"},{"location":"ckb-data-schema-v2/#4-performance-optimizations","title":"4. Performance Optimizations","text":"<p># Connection pooling</p> <p>async def create_db_pool():</p> <pre><code>return await asyncpg.create\\_pool(\n\n    DATABASE\\_URL,\n\n    min\\_size=10,\n\n    max\\_size=20,\n\n    max\\_inactive\\_connection\\_lifetime=300,\n\n    command\\_timeout=60\n\n)\n</code></pre> <p># Batch operations</p> <p>async def bulk_create_entities(entities: List[BaseEntity]):</p> <pre><code>\"\"\"Efficient bulk insert\"\"\"\n\nasync with db.transaction():\n\n    await db.executemany(\"\"\"\n\n        INSERT INTO entities (entity\\_type, name, ...)\n\n        VALUES ($1, $2, ...)\n\n    \"\"\", \\[(e.entity\\_type, e.name, ...) for e in entities\\])\n</code></pre>"},{"location":"ckb-data-schema-v2/#5-testing-strategy","title":"5. Testing Strategy","text":"<p># tests/test_entity_repository.py</p> <p>import pytest</p> <p>from uuid import uuid4</p> <p>@pytest.mark.asyncio</p> <p>async def test_create_location(db):</p> <pre><code>repo \\= EntityRepository(db)\n\n\n\nlocation \\= Location(\n\n    name=\"The Broken Tower\",\n\n    description=\"A crumbling watchtower on the northern border\",\n\n    location\\_type=\"building\",\n\n    campaign\\_id=uuid4(),\n\n    created\\_by=uuid4(),\n\n    updated\\_by=uuid4()\n\n)\n\n\n\nentity\\_id \\= await repo.create(location)\n\nassert entity\\_id is not None\n\n\n\n\\# Verify retrieval\n\nsaved \\= await repo.get\\_by\\_id(entity\\_id)\n\nassert saved\\['name'\\] \\== \"The Broken Tower\"\n\nassert saved\\['version'\\] \\== 1\n</code></pre>"},{"location":"ckb-data-schema-v2/#migration-path-from-v10","title":"Migration Path from v1.0","text":"<ol> <li>Week 1: Set up PostgreSQL, create base schema  </li> <li>Week 2: Implement entity repository and API endpoints  </li> <li>Week 3: Add validation and testing  </li> <li>Week 4: Performance optimization and indexing  </li> <li>Future: Evaluate graph database needs based on actual query patterns</li> </ol>"},{"location":"ckb-data-schema-v2/#key-improvements","title":"Key Improvements","text":"<ul> <li>80% reduction in required fields  </li> <li>Single database reduces operational complexity  </li> <li>Progressive enhancement allows gradual feature addition  </li> <li>Shared validation via Pydantic models  </li> <li>Clear performance path with PostgreSQL-first approach</li> </ul> <p>This streamlined schema maintains all essential functionality while dramatically reducing complexity and improving maintainability for the MVC release.  </p>"},{"location":"dma-agent-contract-tests-v2/","title":"DMA Agent Contract Tests &amp; Shared Components","text":""},{"location":"dma-agent-contract-tests-v2/#directory-structure","title":"Directory Structure","text":"<p>dma/</p> <p>\u251c\u2500\u2500 agent_contracts/</p> <p>\u2502   \u251c\u2500\u2500 schemas/</p> <p>\u2502   \u2502   \u251c\u2500\u2500 bus-message.v1.json</p> <p>\u2502   \u2502   \u251c\u2500\u2500 scribe-request.v1.json</p> <p>\u2502   \u2502   \u251c\u2500\u2500 scribe-response.v1.json</p> <p>\u2502   \u2502   \u251c\u2500\u2500 sma-request.v1.json</p> <p>\u2502   \u2502   \u251c\u2500\u2500 sma-response.v1.json</p> <p>\u2502   \u2502   \u251c\u2500\u2500 wed-request.v1.json</p> <p>\u2502   \u2502   \u2514\u2500\u2500 wed-response.v1.json</p> <p>\u2502   \u251c\u2500\u2500 golden/</p> <p>\u2502   \u2502   \u251c\u2500\u2500 scribe_ingest_npc.json</p> <p>\u2502   \u2502   \u251c\u2500\u2500 sma_thac0_lookup.json</p> <p>\u2502   \u2502   \u2514\u2500\u2500 wed_dungeon_generation.json</p> <p>\u2502   \u2514\u2500\u2500 examples/</p> <p>\u2502       \u2514\u2500\u2500 message_flows.md</p> <p>\u251c\u2500\u2500 shared/</p> <p>\u2502   \u251c\u2500\u2500 dma_shared_resilience/</p> <p>\u2502   \u2502   \u251c\u2500\u2500 __init__.py</p> <p>\u2502   \u2502   \u251c\u2500\u2500 circuit_breaker.py</p> <p>\u2502   \u2502   \u251c\u2500\u2500 bulkhead.py</p> <p>\u2502   \u2502   \u2514\u2500\u2500 retry.py</p> <p>\u2502   \u251c\u2500\u2500 dma_llm_gateway/</p> <p>\u2502   \u2502   \u251c\u2500\u2500 __init__.py</p> <p>\u2502   \u2502   \u251c\u2500\u2500 client.py</p> <p>\u2502   \u2502   \u251c\u2500\u2500 prompt_cache.py</p> <p>\u2502   \u2502   \u2514\u2500\u2500 token_meter.py</p> <p>\u2502   \u2514\u2500\u2500 dma_common/</p> <p>\u2502       \u251c\u2500\u2500 __init__.py</p> <p>\u2502       \u251c\u2500\u2500 validators.py</p> <p>\u2502       \u251c\u2500\u2500 constants.py</p> <p>\u2502       \u2514\u2500\u2500 models.py</p> <p>\u2514\u2500\u2500 tests/</p> <pre><code>\u251c\u2500\u2500 contracts/\n\n\u2502   \u251c\u2500\u2500 test\\_bus\\_messages.py\n\n\u2502   \u251c\u2500\u2500 test\\_agent\\_messages.py\n\n\u2502   \u2514\u2500\u2500 test\\_schema\\_evolution.py\n\n\u251c\u2500\u2500 golden/\n\n\u2502   \u251c\u2500\u2500 test\\_scribe\\_golden.py\n\n\u2502   \u251c\u2500\u2500 test\\_sma\\_golden.py\n\n\u2502   \u2514\u2500\u2500 test\\_wed\\_golden.py\n\n\u2514\u2500\u2500 integration/\n\n    \u2514\u2500\u2500 test\\_agent\\_flows.py\n</code></pre>"},{"location":"dma-agent-contract-tests-v2/#shared-components-implementation","title":"Shared Components Implementation","text":""},{"location":"dma-agent-contract-tests-v2/#1-dma-shared-resilience-package","title":"1. DMA Shared Resilience Package","text":"<p># shared/dma_shared_resilience/__init__.py</p> <p>\"\"\"</p> <p>DMA Shared Resilience Library</p> <p>Provides circuit breakers, bulkheads, and retry logic for all agents</p> <p>\"\"\"</p> <p>from .circuit_breaker import CircuitBreaker</p> <p>from .bulkhead import Bulkhead</p> <p>from .retry import RetryWithBackoff</p> <p>__version__ \\= \"1.0.0\"</p> <p>__all__ \\= [\"CircuitBreaker\", \"Bulkhead\", \"RetryWithBackoff\"]</p> <p># shared/dma_shared_resilience/circuit_breaker.py</p> <p>import time</p> <p>import asyncio</p> <p>from enum import Enum</p> <p>from typing import Callable, Optional</p> <p>from functools import wraps</p> <p>class CircuitState(Enum):</p> <pre><code>CLOSED \\= \"closed\"\n\nOPEN \\= \"open\"\n\nHALF\\_OPEN \\= \"half\\_open\"\n</code></pre> <p>class CircuitBreaker:</p> <pre><code>\"\"\"\n\nCircuit breaker pattern implementation for fault tolerance\n\n\"\"\"\n\ndef \\_\\_init\\_\\_(self,\n\n             failure\\_threshold: int \\= 5,\n\n             recovery\\_timeout: int \\= 60,\n\n             expected\\_exception: type \\= Exception):\n\n    self.failure\\_threshold \\= failure\\_threshold\n\n    self.recovery\\_timeout \\= recovery\\_timeout\n\n    self.expected\\_exception \\= expected\\_exception\n\n    self.failure\\_count \\= 0\n\n    self.last\\_failure\\_time: Optional\\[float\\] \\= None\n\n    self.state \\= CircuitState.CLOSED\n\n\n\ndef \\_\\_call\\_\\_(self, func: Callable) \\-\\&gt; Callable:\n\n    @wraps(func)\n\n    async def wrapper(\\*args, \\*\\*kwargs):\n\n        if self.state \\== CircuitState.OPEN:\n\n            if self.\\_should\\_attempt\\_reset():\n\n                self.state \\= CircuitState.HALF\\_OPEN\n\n            else:\n\n                raise Exception(f\"Circuit breaker is OPEN for {func.\\_\\_name\\_\\_}\")\n\n\n\n        try:\n\n            result \\= await func(\\*args, \\*\\*kwargs)\n\n            self.\\_on\\_success()\n\n            return result\n\n        except self.expected\\_exception as e:\n\n            self.\\_on\\_failure()\n\n            raise\n\n\n\n    return wrapper\n\n\n\ndef \\_should\\_attempt\\_reset(self) \\-\\&gt; bool:\n\n    return (\n\n        self.last\\_failure\\_time and\n\n        time.time() \\- self.last\\_failure\\_time \\&gt;= self.recovery\\_timeout\n\n    )\n\n\n\ndef \\_on\\_success(self):\n\n    self.failure\\_count \\= 0\n\n    self.state \\= CircuitState.CLOSED\n\n\n\ndef \\_on\\_failure(self):\n\n    self.failure\\_count \\+= 1\n\n    self.last\\_failure\\_time \\= time.time()\n\n    if self.failure\\_count \\&gt;= self.failure\\_threshold:\n\n        self.state \\= CircuitState.OPEN\n</code></pre> <p># shared/dma_shared_resilience/retry.py</p> <p>import asyncio</p> <p>import random</p> <p>from typing import Callable, Type, Tuple</p> <p>from functools import wraps</p> <p>class RetryWithBackoff:</p> <pre><code>\"\"\"\n\nRetry with exponential backoff and jitter\n\n\"\"\"\n\ndef \\_\\_init\\_\\_(self,\n\n             max\\_attempts: int \\= 3,\n\n             base\\_delay: float \\= 1.0,\n\n             max\\_delay: float \\= 60.0,\n\n             exceptions: Tuple\\[Type\\[Exception\\], ...\\] \\= (Exception,)):\n\n    self.max\\_attempts \\= max\\_attempts\n\n    self.base\\_delay \\= base\\_delay\n\n    self.max\\_delay \\= max\\_delay\n\n    self.exceptions \\= exceptions\n\n\n\ndef \\_\\_call\\_\\_(self, func: Callable) \\-\\&gt; Callable:\n\n    @wraps(func)\n\n    async def wrapper(\\*args, \\*\\*kwargs):\n\n        attempt \\= 0\n\n        while attempt \\&lt; self.max\\_attempts:\n\n            try:\n\n                return await func(\\*args, \\*\\*kwargs)\n\n            except self.exceptions as e:\n\n                attempt \\+= 1\n\n                if attempt \\&gt;= self.max\\_attempts:\n\n                    raise\n\n\n\n                \\# Exponential backoff with jitter\n\n                delay \\= min(\n\n                    self.base\\_delay \\* (2 \\*\\* (attempt \\- 1)),\n\n                    self.max\\_delay\n\n                )\n\n                jitter \\= random.uniform(0, delay \\* 0.1)\n\n                await asyncio.sleep(delay \\+ jitter)\n\n\n\n    return wrapper\n</code></pre>"},{"location":"dma-agent-contract-tests-v2/#2-llm-gateway-service","title":"2. LLM Gateway Service","text":"<p># shared/dma_llm_gateway/client.py</p> <p>\"\"\"</p> <p>Centralized LLM client with caching and metering</p> <p>\"\"\"</p> <p>import hashlib</p> <p>import time</p> <p>from typing import Dict, Optional, Any</p> <p>from dataclasses import dataclass</p> <p>@dataclass</p> <p>class LLMResponse:</p> <pre><code>content: str\n\ntokens\\_used: int\n\nmodel: str\n\ncached: bool \\= False\n</code></pre> <p>class LLMGateway:</p> <pre><code>\"\"\"\n\nCentralized LLM access with token metering and caching\n\n\"\"\"\n\ndef \\_\\_init\\_\\_(self,\n\n             api\\_keys: Dict\\[str, str\\],\n\n             cache\\_ttl: int \\= 3600,\n\n             token\\_limit\\_per\\_minute: int \\= 10000):\n\n    self.api\\_keys \\= api\\_keys\n\n    self.cache \\= {}  \\# In production, use Redis\n\n    self.cache\\_ttl \\= cache\\_ttl\n\n    self.token\\_meter \\= TokenMeter(token\\_limit\\_per\\_minute)\n\n\n\nasync def generate(self,\n\n                  prompt: str,\n\n                  model: str \\= \"gpt-4\",\n\n                  max\\_tokens: int \\= 1000,\n\n                  temperature: float \\= 0.7) \\-\\&gt; LLMResponse:\n\n    \"\"\"\n\n    Generate text with caching and metering\n\n    \"\"\"\n\n    \\# Check cache first\n\n    cache\\_key \\= self.\\_get\\_cache\\_key(prompt, model, temperature)\n\n    cached\\_response \\= self.\\_get\\_from\\_cache(cache\\_key)\n\n    if cached\\_response:\n\n        return cached\\_response\n\n\n\n    \\# Check token limits\n\n    if not self.token\\_meter.can\\_proceed(max\\_tokens):\n\n        raise Exception(\"Token rate limit exceeded\")\n\n\n\n    \\# Make API call\n\n    response \\= await self.\\_call\\_llm(prompt, model, max\\_tokens, temperature)\n\n\n\n    \\# Update meter\n\n    self.token\\_meter.record\\_usage(response.tokens\\_used)\n\n\n\n    \\# Cache response\n\n    self.\\_cache\\_response(cache\\_key, response)\n\n\n\n    return response\n\n\n\ndef \\_get\\_cache\\_key(self, prompt: str, model: str, temperature: float) \\-\\&gt; str:\n\n    \"\"\"Generate deterministic cache key\"\"\"\n\n    content \\= f\"{prompt}|{model}|{temperature}\"\n\n    return hashlib.sha256(content.encode()).hexdigest()\n\n\n\ndef \\_get\\_from\\_cache(self, key: str) \\-\\&gt; Optional\\[LLMResponse\\]:\n\n    \"\"\"Retrieve from cache if not expired\"\"\"\n\n    if key in self.cache:\n\n        entry \\= self.cache\\[key\\]\n\n        if time.time() \\- entry\\['timestamp'\\] \\&lt; self.cache\\_ttl:\n\n            response \\= entry\\['response'\\]\n\n            response.cached \\= True\n\n            return response\n\n    return None\n</code></pre> <p>class TokenMeter:</p> <pre><code>\"\"\"Track and limit token usage\"\"\"\n\ndef \\_\\_init\\_\\_(self, tokens\\_per\\_minute: int):\n\n    self.tokens\\_per\\_minute \\= tokens\\_per\\_minute\n\n    self.usage\\_window \\= \\[\\]  \\# (timestamp, tokens) tuples\n\n\n\ndef can\\_proceed(self, requested\\_tokens: int) \\-\\&gt; bool:\n\n    \"\"\"Check if request can proceed within rate limits\"\"\"\n\n    self.\\_clean\\_old\\_entries()\n\n    current\\_usage \\= sum(tokens for \\_, tokens in self.usage\\_window)\n\n    return current\\_usage \\+ requested\\_tokens \\&lt;= self.tokens\\_per\\_minute\n\n\n\ndef record\\_usage(self, tokens: int):\n\n    \"\"\"Record token usage\"\"\"\n\n    self.usage\\_window.append((time.time(), tokens))\n\n\n\ndef \\_clean\\_old\\_entries(self):\n\n    \"\"\"Remove entries older than 1 minute\"\"\"\n\n    cutoff \\= time.time() \\- 60\n\n    self.usage\\_window \\= \\[\n\n        (ts, tokens) for ts, tokens in self.usage\\_window\n\n        if ts \\&gt; cutoff\n\n    \\]\n</code></pre>"},{"location":"dma-agent-contract-tests-v2/#3-common-data-models","title":"3. Common Data Models","text":"<p># shared/dma_common/models.py</p> <p>\"\"\"</p> <p>Shared Pydantic models for cross-agent communication</p> <p>\"\"\"</p> <p>from pydantic import BaseModel, Field, validator</p> <p>from typing import Optional, List, Dict, Any</p> <p>from uuid import UUID</p> <p>from datetime import datetime</p> <p>class BaseEntity(BaseModel):</p> <pre><code>\"\"\"Base class for all CKB entities\"\"\"\n\nid: UUID\n\ntype: str\n\nname: str \\= Field(..., max\\_length=255)\n\ncreated\\_at: datetime \\= Field(default\\_factory=datetime.utcnow)\n\nupdated\\_at: datetime \\= Field(default\\_factory=datetime.utcnow)\n\nversion: int \\= 1\n\n\n\nclass Config:\n\n    json\\_encoders \\= {\n\n        datetime: lambda v: v.isoformat(),\n\n        UUID: lambda v: str(v)\n\n    }\n</code></pre> <p>class NPC(BaseEntity):</p> <pre><code>\"\"\"Non-Player Character entity\"\"\"\n\ntype: str \\= \"npc\"\n\nattributes: Dict\\[str, Any\\] \\= Field(default\\_factory=dict)\n\nrelationships: List\\['Relationship'\\] \\= Field(default\\_factory=list)\n\n\n\n\\# 2e specific fields\n\ncharacter\\_class: Optional\\[str\\]\n\nlevel: Optional\\[int\\] \\= Field(None, ge=0, le=20)\n\nalignment: Optional\\[str\\]\n\nhit\\_points: Optional\\[int\\]\n\narmor\\_class: Optional\\[int\\]\n\nthac0: Optional\\[int\\]\n</code></pre> <p>class Location(BaseEntity):</p> <pre><code>\"\"\"Location entity\"\"\"\n\ntype: str \\= \"location\"\n\nlocation\\_type: str  \\# dungeon, town, wilderness\n\nsize: str \\= Field(..., regex=\"^(small|medium|large)$\")\n\ndescription: str\n\ncontents: List\\[UUID\\] \\= Field(default\\_factory=list)\n</code></pre> <p>class Relationship(BaseModel):</p> <pre><code>\"\"\"Relationship between entities\"\"\"\n\nsource\\_id: UUID\n\ntarget\\_id: UUID\n\nrelationship\\_type: str\n\nstrength: Optional\\[float\\] \\= Field(None, ge=-1.0, le=1.0)\n</code></pre> <p>class TaskResult(BaseModel):</p> <pre><code>\"\"\"Standard task result format\"\"\"\n\nstatus: str \\= Field(..., regex=\"^(success|error|partial)$\")\n\nentities\\_created: int \\= 0\n\nentities\\_updated: int \\= 0\n\nerrors: List\\[Dict\\[str, str\\]\\] \\= Field(default\\_factory=list)\n\nperformance\\_metrics: Dict\\[str, float\\] \\= Field(default\\_factory=dict)\n</code></pre>"},{"location":"dma-agent-contract-tests-v2/#4-contract-test-implementation","title":"4. Contract Test Implementation","text":"<p># tests/contracts/test_agent_messages.py</p> <p>import pytest</p> <p>import json</p> <p>from pathlib import Path</p> <p>from jsonschema import validate, ValidationError, RefResolver</p> <p>class TestAgentContracts:</p> <pre><code>\"\"\"Test all agent message contracts\"\"\"\n\n\n\n@classmethod\n\ndef setup\\_class(cls):\n\n    \"\"\"Load all schemas once\"\"\"\n\n    schema\\_dir \\= Path(\"agent\\_contracts/schemas\")\n\n    cls.schemas \\= {}\n\n\n\n    for schema\\_file in schema\\_dir.glob(\"\\*.json\"):\n\n        with open(schema\\_file) as f:\n\n            cls.schemas\\[schema\\_file.stem\\] \\= json.load(f)\n\n\n\n    \\# Create resolver for $ref resolution\n\n    cls.resolver \\= RefResolver(\n\n        base\\_uri=f\"file://{schema\\_dir.absolute()}/\",\n\n        referrer=cls.schemas\\[\"bus-message.v1\"\\]\n\n    )\n\n\n\n@pytest.mark.parametrize(\"message\\_file\", \\[\n\n    \"scribe\\_store\\_entity.json\",\n\n    \"scribe\\_search\\_query.json\",\n\n    \"sma\\_thac0\\_calc.json\",\n\n    \"wed\\_dungeon\\_gen.json\"\n\n\\])\n\ndef test\\_valid\\_messages(self, message\\_file):\n\n    \"\"\"Test valid message examples\"\"\"\n\n    with open(f\"tests/fixtures/valid/{message\\_file}\") as f:\n\n        message \\= json.load(f)\n\n\n\n    \\# Determine which schema to use\n\n    if \"scribe\" in message\\_file:\n\n        schema \\= self.schemas\\[\"scribe-request.v1\"\\]\n\n    elif \"sma\" in message\\_file:\n\n        schema \\= self.schemas\\[\"sma-request.v1\"\\]\n\n    elif \"wed\" in message\\_file:\n\n        schema \\= self.schemas\\[\"wed-request.v1\"\\]\n\n\n\n    \\# Should not raise\n\n    validate(message, schema, resolver=self.resolver)\n\n\n\ndef test\\_schema\\_evolution(self):\n\n    \"\"\"Ensure schemas are backward compatible\"\"\"\n\n    \\# Load v1 message\n\n    with open(\"tests/fixtures/v1\\_message.json\") as f:\n\n        v1\\_message \\= json.load(f)\n\n\n\n    \\# Should still validate against current schema\n\n    validate(v1\\_message, self.schemas\\[\"bus-message.v1\"\\])\n</code></pre>"},{"location":"dma-agent-contract-tests-v2/#5-golden-file-tests","title":"5. Golden File Tests","text":"<p># tests/golden/test_sma_golden.py</p> <p>import json</p> <p>from pathlib import Path</p> <p>from agents.system_mastery import SystemMasteryAgent</p> <p>class TestSMAGoldenFiles:</p> <pre><code>\"\"\"Test System Mastery Agent against golden files\"\"\"\n\n\n\n@classmethod\n\ndef setup\\_class(cls):\n\n    cls.sma \\= SystemMasteryAgent()\n\n    cls.golden\\_dir \\= Path(\"agent\\_contracts/golden\")\n\n\n\ndef test\\_thac0\\_calculations(self):\n\n    \"\"\"Test THAC0 calculations match golden files\"\"\"\n\n    with open(self.golden\\_dir / \"sma\\_thac0\\_golden.json\") as f:\n\n        test\\_cases \\= json.load(f)\n\n\n\n    for test in test\\_cases\\[\"thac0\\_tests\"\\]:\n\n        result \\= self.sma.calculate\\_thac0(\n\n            character\\_class=test\\[\"input\"\\]\\[\"class\"\\],\n\n            level=test\\[\"input\"\\]\\[\"level\"\\]\n\n        )\n\n\n\n        assert result \\== test\\[\"expected\"\\], (\n\n            f\"THAC0 mismatch for {test\\['input'\\]\\['class'\\]} \"\n\n            f\"level {test\\['input'\\]\\['level'\\]}: \"\n\n            f\"expected {test\\['expected'\\]}, got {result}\"\n\n        )\n\n\n\ndef test\\_saving\\_throws(self):\n\n    \"\"\"Test saving throw calculations\"\"\"\n\n    with open(self.golden\\_dir / \"sma\\_saves\\_golden.json\") as f:\n\n        test\\_cases \\= json.load(f)\n\n\n\n    for test in test\\_cases\\[\"save\\_tests\"\\]:\n\n        result \\= self.sma.calculate\\_save(\n\n            save\\_type=test\\[\"input\"\\]\\[\"type\"\\],\n\n            character\\_class=test\\[\"input\"\\]\\[\"class\"\\],\n\n            level=test\\[\"input\"\\]\\[\"level\"\\],\n\n            modifiers=test\\[\"input\"\\].get(\"modifiers\", {})\n\n        )\n\n\n\n        assert result \\== test\\[\"expected\"\\]\n</code></pre>"},{"location":"dma-agent-contract-tests-v2/#6-integration-test-example","title":"6. Integration Test Example","text":"<p># tests/integration/test_agent_flows.py</p> <p>import asyncio</p> <p>import pytest</p> <p>from unittest.mock import AsyncMock</p> <p>from agents.orchestrator import Orchestrator</p> <p>class TestAgentIntegration:</p> <pre><code>\"\"\"Test complete agent workflows\"\"\"\n\n\n\n@pytest.mark.asyncio\n\nasync def test\\_npc\\_creation\\_flow(self, redis\\_mock, postgres\\_mock):\n\n    \"\"\"Test creating an NPC through full agent flow\"\"\"\n\n    orchestrator \\= Orchestrator(\n\n        redis\\_url=\"redis://localhost\",\n\n        db\\_url=\"postgresql://localhost/test\"\n\n    )\n\n\n\n    \\# Mock external dependencies\n\n    orchestrator.llm\\_gateway \\= AsyncMock()\n\n    orchestrator.llm\\_gateway.generate.return\\_value \\= {\n\n        \"content\": \"A mysterious wizard\",\n\n        \"tokens\\_used\": 50\n\n    }\n\n\n\n    \\# Submit NPC creation request\n\n    request \\= {\n\n        \"prompt\": \"Create a level 7 wizard NPC named Elara\",\n\n        \"context\": {\n\n            \"campaign\\_id\": \"test-campaign\",\n\n            \"session\\_id\": \"test-session\"\n\n        }\n\n    }\n\n\n\n    result \\= await orchestrator.process\\_request(request)\n\n\n\n    \\# Verify flow\n\n    assert result\\[\"status\"\\] \\== \"success\"\n\n    assert result\\[\"entities\\_created\"\\] \\== 1\n\n    assert \"npc\" in result\\[\"created\\_entities\"\\]\\[0\\]\\[\"type\"\\]\n\n\n\n    \\# Verify agent communications\n\n    assert redis\\_mock.xadd.call\\_count \\&gt;= 3  \\# At least 3 messages\n\n\n\n    \\# Verify data persistence\n\n    assert postgres\\_mock.execute.called\n</code></pre>"},{"location":"dma-agent-contract-tests-v2/#deployment-checklist","title":"Deployment Checklist","text":""},{"location":"dma-agent-contract-tests-v2/#pre-deployment-validation","title":"Pre-deployment Validation","text":"<p>#!/bin/bash</p> <p># scripts/validate_deployment.sh</p> <p>echo \"Running pre-deployment validation...\"</p> <p># 1. Validate all schemas</p> <p>echo \"Validating JSON schemas...\"</p> <p>ajv compile -s agent_contracts/schemas/*.json</p> <p># 2. Run contract tests</p> <p>echo \"Running contract tests...\"</p> <p>pytest tests/contracts -v</p> <p># 3. Check golden files</p> <p>echo \"Validating golden files...\"</p> <p>pytest tests/golden -v</p> <p># 4. Verify shared packages</p> <p>echo \"Testing shared packages...\"</p> <p>cd shared/dma_shared_resilience &amp;&amp; python -m pytest</p> <p>cd ../dma_llm_gateway &amp;&amp; python -m pytest</p> <p>cd ../dma_common &amp;&amp; python -m pytest</p> <p># 5. Integration tests</p> <p>echo \"Running integration tests...\"</p> <p>docker-compose -f docker-compose.test.yml up --abort-on-container-exit</p> <p>echo \"Validation complete!\"</p>"},{"location":"dma-agent-contract-tests-v2/#monitoring-configuration","title":"Monitoring Configuration","text":"<p># monitoring/alerts.yml</p> <p>groups:</p> <p>- name: agent_health</p> <pre><code>rules:\n\n  \\- alert: AgentDown\n\n    expr: up{job=\"dma\\_agent\"} \\== 0\n\n    for: 5m\n\n    annotations:\n\n      summary: \"Agent {{ $labels.agent\\_name }} is down\"\n\n\n\n  \\- alert: HighErrorRate\n\n    expr: rate(agent\\_errors\\_total\\[5m\\]) \\&gt; 0.1\n\n    for: 10m\n\n    annotations:\n\n      summary: \"High error rate for {{ $labels.agent\\_name }}\"\n\n\n\n  \\- alert: SlowResponse\n\n    expr: histogram\\_quantile(0.95, agent\\_response\\_time\\_seconds) \\&gt; 2\n\n    for: 15m\n\n    annotations:\n\n      summary: \"95th percentile response time \\&gt; 2s\"\n</code></pre> <p>This completes the comprehensive agent specification rewrite with machine-readable contracts, shared components, and a complete testing framework. The focus on three core agents for MVC ensures deliverability while maintaining extensibility for future phases.  </p>"},{"location":"dma-api-design-spec-v2/","title":"DMA API Design Specification v2.0 - MVC Edition","text":""},{"location":"dma-api-design-spec-v2/#streamlined-api-architecture-for-q3-2025-launch","title":"Streamlined API Architecture for Q3 2025 Launch","text":"<p>Version: 2.0 (MVC-Focused) Date: June 28, 2025 Author: J.P. Dow</p>"},{"location":"dma-api-design-spec-v2/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview </li> <li>Public REST API </li> <li>Fast Lane API </li> <li>Internal Message Bus </li> <li>Authentication &amp; Security </li> <li>Error Handling </li> <li>Observability </li> <li>API Contracts </li> <li>Implementation Checklist</li> </ol>"},{"location":"dma-api-design-spec-v2/#overview","title":"Overview","text":"<p>This specification defines the API architecture for the DMA Minimum Viable Campaign (MVC) release, focusing on:</p> <ul> <li>3 agents only: Scribe, System Mastery, World Designer  </li> <li>Single PostgreSQL database </li> <li>Redis Streams for messaging </li> <li>Fast Lane RPC for sub-500ms operations</li> </ul>"},{"location":"dma-api-design-spec-v2/#architecture-diagram","title":"Architecture Diagram","text":"<p>graph TB</p> <pre><code>UI\\[DM Interface\\] \\--\\&gt;|REST| ORC\\[Orchestrator\\]\n\nUI \\--\\&gt;|Fast Lane| FL\\[Fast Lane Service\\]\n\n\n\nORC \\--\\&gt;|Redis Streams| RS\\[Message Bus\\]\n\nRS \\--\\&gt; SCA\\[Scribe Agent\\]\n\nRS \\--\\&gt; SMA\\[System Mastery Agent\\]\n\nRS \\--\\&gt; WED\\[World Designer Agent\\]\n\n\n\nSCA \\--\\&gt; PG\\[(PostgreSQL)\\]\n\nSMA \\--\\&gt; PG\n\nWED \\--\\&gt; PG\n\nFL \\--\\&gt; PG\n\n\n\nORC \\--\\&gt; LLM\\[OpenAI GPT-4\\]\n</code></pre>"},{"location":"dma-api-design-spec-v2/#public-rest-api","title":"Public REST API","text":""},{"location":"dma-api-design-spec-v2/#base-configuration","title":"Base Configuration","text":"<p>api:</p> <p>version: \"v1\"</p> <p>base_url: \"http://localhost:8000/v1\"</p> <p>timeout: 30s</p> <p>max_request_size: 10MB</p>"},{"location":"dma-api-design-spec-v2/#core-endpoints","title":"Core Endpoints","text":""},{"location":"dma-api-design-spec-v2/#1-prompt-processing","title":"1. Prompt Processing","text":"<p>POST /v1/prompts</p> <p>Authorization: Bearer {token}</p> <p>Content-Type: application/json</p> <p>{</p> <p>\"prompt\": \"Describe the ancient dwarven hall\",</p> <p>\"context\": {</p> <pre><code>\"campaign\\_id\": \"uuid\",\n\n\"location\\_id\": \"uuid\",\n\n\"session\\_id\": \"uuid\"\n</code></pre> <p>},</p> <p>\"options\": {</p> <pre><code>\"timeout\\_ms\": 30000,\n\n\"include\\_stats\": false\n</code></pre> <p>}</p> <p>}</p> <p>Response 202 Accepted:</p> <p>{</p> <p>\"request_id\": \"req_123\",</p> <p>\"status\": \"processing\",</p> <p>\"poll_url\": \"/v1/prompts/req_123\"</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#2-result-polling","title":"2. Result Polling","text":"<p>GET /v1/prompts/{request_id}</p> <p>Authorization: Bearer {token}</p> <p>Response 200 OK:</p> <p>{</p> <p>\"request_id\": \"req_123\",</p> <p>\"status\": \"completed\",</p> <p>\"result\": {</p> <pre><code>\"content\": \"The ancient dwarven hall...\",\n\n\"entities\\_created\": \\[\"loc\\_789\", \"npc\\_456\"\\],\n\n\"tokens\\_used\": 150\n</code></pre> <p>},</p> <p>\"completed_at\": \"2025-06-28T10:30:00Z\"</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#3-entity-crud","title":"3. Entity CRUD","text":"<p># List entities</p> <p>GET /v1/entities/{type}?campaign_id={uuid}\\&amp;limit=100\\&amp;offset=0</p> <p># Get single entity</p> <p>GET /v1/entities/{type}/{id}</p> <p># Create entity</p> <p>POST /v1/entities/{type}</p> <p>{</p> <p>\"name\": \"Broken Tower\",</p> <p>\"description\": \"A crumbling watchtower\",</p> <p>\"location_type\": \"building\",</p> <p>\"campaign_id\": \"uuid\"</p> <p>}</p> <p># Update entity (with optimistic locking)</p> <p>PUT /v1/entities/{type}/{id}</p> <p>If-Match: {version}</p> <p>{</p> <p>\"description\": \"Updated description\"</p> <p>}</p> <p># Soft delete</p> <p>DELETE /v1/entities/{type}/{id}</p>"},{"location":"dma-api-design-spec-v2/#4-search","title":"4. Search","text":"<p>POST /v1/search</p> <p>{</p> <p>\"query\": \"ancient elven\",</p> <p>\"entity_types\": [\"location\", \"item\"],</p> <p>\"campaign_id\": \"uuid\",</p> <p>\"limit\": 20</p> <p>}</p> <p>Response:</p> <p>{</p> <p>\"results\": [</p> <pre><code>{\n\n  \"entity\\_id\": \"loc\\_123\",\n\n  \"entity\\_type\": \"location\",\n\n  \"name\": \"Ancient Elven Temple\",\n\n  \"score\": 0.95\n\n}\n</code></pre> <p>],</p> <p>\"total\": 3</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#standard-headers","title":"Standard Headers","text":"<p># All responses include:</p> <p>X-Request-ID: req_123</p> <p>X-RateLimit-Remaining: 95</p> <p>X-RateLimit-Reset: 1719573600</p> <p>X-Response-Time: 234ms</p>"},{"location":"dma-api-design-spec-v2/#fast-lane-api","title":"Fast Lane API","text":"<p>Direct RPC endpoints bypassing the message bus for latency-critical operations.</p>"},{"location":"dma-api-design-spec-v2/#design-principles","title":"Design Principles","text":"<ul> <li>No LLM calls </li> <li>No database writes </li> <li>In-memory caching </li> <li>Sub-500ms P95 latency</li> </ul>"},{"location":"dma-api-design-spec-v2/#endpoints","title":"Endpoints","text":""},{"location":"dma-api-design-spec-v2/#1-thac0-calculation","title":"1. THAC0 Calculation","text":"<p>GET /v1/fast/thac0?level=5\\&amp;class=fighter\\&amp;strength=18</p> <p>Response 200 OK (12ms):</p> <p>{</p> <p>\"base_thac0\": 16,</p> <p>\"strength_bonus\": 1,</p> <p>\"final_thac0\": 15,</p> <p>\"cache_hit\": true</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#2-saving-throws","title":"2. Saving Throws","text":"<p>GET /v1/fast/saves?class=wizard\\&amp;level=7</p> <p>Response 200 OK (8ms):</p> <p>{</p> <p>\"paralyzation\": 13,</p> <p>\"rod_staff_wand\": 9,</p> <p>\"petrification\": 11,</p> <p>\"breath_weapon\": 13,</p> <p>\"spell\": 10</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#3-armor-class","title":"3. Armor Class","text":"<p>POST /v1/fast/ac</p> <p>{</p> <p>\"base_ac\": 10,</p> <p>\"armor\": \"chain_mail\",</p> <p>\"shield\": true,</p> <p>\"dexterity\": 16</p> <p>}</p> <p>Response 200 OK (15ms):</p> <p>{</p> <p>\"armor_ac\": 5,</p> <p>\"shield_bonus\": -1,</p> <p>\"dex_bonus\": -2,</p> <p>\"final_ac\": 2</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#cache-strategy","title":"Cache Strategy","text":"<p># In-memory rule cache with startup preload</p> <p>RULE_CACHE \\= {</p> <pre><code>'thac0': load\\_thac0\\_tables(),\n\n'saves': load\\_saving\\_throw\\_tables(),\n\n'armor': load\\_armor\\_values()\n</code></pre> <p>}</p> <p>@app.on_event(\"startup\")</p> <p>async def preload_cache():</p> <pre><code>\"\"\"Load all 2e rules into memory at startup\"\"\"\n\nawait load\\_rules\\_from\\_database()\n</code></pre>"},{"location":"dma-api-design-spec-v2/#internal-message-bus","title":"Internal Message Bus","text":""},{"location":"dma-api-design-spec-v2/#technology-choice-redis-streams","title":"Technology Choice: Redis Streams","text":"<p>Chosen over Pub/Sub for:</p> <ul> <li>Persistence: Messages survive crashes  </li> <li>Consumer groups: Load balancing  </li> <li>Dead letter queues: Failed message handling  </li> <li>Message ordering: FIFO guarantees</li> </ul>"},{"location":"dma-api-design-spec-v2/#stream-configuration","title":"Stream Configuration","text":"<p>streams:</p> <p>agent_tasks:</p> <pre><code>max\\_length: 10000\n\nretention: \"24h\"\n\nconsumer\\_groups:\n\n  \\- scribe\\_workers\n\n  \\- system\\_mastery\\_workers\n\n  \\- world\\_designer\\_workers\n</code></pre> <p>agent_results:</p> <pre><code>max\\_length: 5000\n\nretention: \"24h\"\n\nconsumer\\_groups:\n\n  \\- orchestrator\\_workers\n</code></pre>"},{"location":"dma-api-design-spec-v2/#message-schema","title":"Message Schema","text":"<p>interface AgentMessage {</p> <p>// Required fields</p> <p>message_id: string;        // UUID</p> <p>timestamp: string;         // ISO 8601</p> <p>source: string;            // Agent name or \"orchestrator\"</p> <p>target: string;            // Agent name or \"orchestrator\"</p> <p>message_type: MessageType;</p> <p>correlation_id: string;    // Links request/response</p> <p>// Payload</p> <p>payload: Record\\&lt;string, any&gt;;</p> <p>// Delivery guarantees</p> <p>max_retries: number;       // Default: 3</p> <p>timeout_ms: number;        // Default: 30000</p> <p>priority: 1 | 2 | 3;       // 1 \\= highest</p> <p>}</p> <p>enum MessageType {</p> <p>// Task assignments</p> <p>TASK_CREATE_ENTITY \\= \"task.create_entity\",</p> <p>TASK_UPDATE_ENTITY \\= \"task.update_entity\",</p> <p>TASK_SEARCH_ENTITIES \\= \"task.search_entities\",</p> <p>TASK_VALIDATE_RULE \\= \"task.validate_rule\",</p> <p>TASK_GENERATE_CONTENT \\= \"task.generate_content\",</p> <p>// Results</p> <p>RESULT_SUCCESS \\= \"result.success\",</p> <p>RESULT_ERROR \\= \"result.error\",</p> <p>RESULT_PARTIAL \\= \"result.partial\",</p> <p>// System</p> <p>AGENT_READY \\= \"agent.ready\",</p> <p>AGENT_BUSY \\= \"agent.busy\",</p> <p>HEALTH_CHECK \\= \"system.health_check\"</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#example-messages","title":"Example Messages","text":"<p>// Task Assignment</p> <p>{</p> <p>\"message_id\": \"msg_123\",</p> <p>\"timestamp\": \"2025-06-28T10:00:00Z\",</p> <p>\"source\": \"orchestrator\",</p> <p>\"target\": \"scribe\",</p> <p>\"message_type\": \"task.create_entity\",</p> <p>\"correlation_id\": \"req_456\",</p> <p>\"payload\": {</p> <pre><code>\"entity\\_type\": \"location\",\n\n\"data\": {\n\n  \"name\": \"The Sunken Temple\",\n\n  \"description\": \"An ancient temple half-submerged...\",\n\n  \"location\\_type\": \"dungeon\"\n\n}\n</code></pre> <p>},</p> <p>\"max_retries\": 3,</p> <p>\"timeout_ms\": 5000,</p> <p>\"priority\": 2</p> <p>}</p> <p>// Task Result</p> <p>{</p> <p>\"message_id\": \"msg_124\",</p> <p>\"timestamp\": \"2025-06-28T10:00:02Z\",</p> <p>\"source\": \"scribe\",</p> <p>\"target\": \"orchestrator\",</p> <p>\"message_type\": \"result.success\",</p> <p>\"correlation_id\": \"req_456\",</p> <p>\"payload\": {</p> <pre><code>\"entity\\_id\": \"loc\\_789\",\n\n\"version\": 1,\n\n\"created\\_at\": \"2025-06-28T10:00:02Z\"\n</code></pre> <p>}</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#dead-letter-queue","title":"Dead Letter Queue","text":"<p># Automatic DLQ handling</p> <p>async def process_with_dlq(message: AgentMessage):</p> <pre><code>try:\n\n    result \\= await process\\_message(message)\n\n    await redis.xack(STREAM\\_NAME, GROUP\\_NAME, message.id)\n\n    return result\n\nexcept Exception as e:\n\n    message.retry\\_count \\+= 1\n\n\n\n    if message.retry\\_count \\&gt;= message.max\\_retries:\n\n        \\# Move to DLQ\n\n        await redis.xadd(\n\n            f\"{STREAM\\_NAME}:dlq\",\n\n            {\n\n                \\*\\*message.dict(),\n\n                \"error\": str(e),\n\n                \"failed\\_at\": datetime.utcnow().isoformat()\n\n            }\n\n        )\n\n    else:\n\n        \\# Retry with backoff\n\n        delay \\= 2 \\*\\* message.retry\\_count\n\n        await redis.xadd(\n\n            f\"{STREAM\\_NAME}:retry\",\n\n            message.dict(),\n\n            id=f\"{int(time.time() \\+ delay) \\* 1000}-0\"\n\n        )\n</code></pre>"},{"location":"dma-api-design-spec-v2/#authentication-security","title":"Authentication &amp; Security","text":""},{"location":"dma-api-design-spec-v2/#token-strategy","title":"Token Strategy","text":"<p>auth:</p> <p># UI -&gt; Orchestrator: JWT tokens</p> <p>ui_auth:</p> <pre><code>type: \"jwt\"\n\nissuer: \"dma-auth\"\n\nexpiry: \"1h\"\n\nrefresh\\_enabled: true\n</code></pre> <p># Internal services: Shared secret</p> <p>service_auth:</p> <pre><code>type: \"bearer\"\n\ntoken\\_prefix: \"svc\\_\"\n\nrotation\\_interval: \"24h\"\n</code></pre>"},{"location":"dma-api-design-spec-v2/#implementation","title":"Implementation","text":"<p>from fastapi import Security, HTTPException</p> <p>from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials</p> <p>security \\= HTTPBearer()</p> <p>async def verify_token(credentials: HTTPAuthorizationCredentials \\= Security(security)):</p> <pre><code>token \\= credentials.credentials\n\n\n\nif token.startswith(\"svc\\_\"):\n\n    \\# Service token validation\n\n    if not await validate\\_service\\_token(token):\n\n        raise HTTPException(401, \"Invalid service token\")\n\nelse:\n\n    \\# JWT validation\n\n    try:\n\n        payload \\= jwt.decode(token, SECRET\\_KEY, algorithms=\\[\"HS256\"\\])\n\n        return payload\n\n    except jwt.ExpiredSignatureError:\n\n        raise HTTPException(401, \"Token expired\")\n\n    except jwt.InvalidTokenError:\n\n        raise HTTPException(401, \"Invalid token\")\n</code></pre> <p># Apply to all endpoints</p> <p>@app.post(\"/v1/prompts\", dependencies=[Depends(verify_token)])</p> <p>async def process_prompt(request: PromptRequest):</p> <pre><code>...\n</code></pre>"},{"location":"dma-api-design-spec-v2/#local-development","title":"Local Development","text":"<p># .env.local</p> <p>AUTH_ENABLED=true</p> <p>DEV_TOKEN=dev_local_token_123</p> <p>SECRET_KEY=local_development_key</p> <p># Docker compose</p> <p>environment:</p> <p>- AUTH_ENABLED=${AUTH_ENABLED:-true}</p> <p>- DEV_TOKEN=${DEV_TOKEN}</p>"},{"location":"dma-api-design-spec-v2/#error-handling","title":"Error Handling","text":""},{"location":"dma-api-design-spec-v2/#error-response-format","title":"Error Response Format","text":"<p>Following RFC 7807 Problem Details:</p> <p>{</p> <p>\"type\": \"https://api.dma.com/errors/validation\",</p> <p>\"title\": \"Validation Error\",</p> <p>\"status\": 400,</p> <p>\"detail\": \"The location_type 'castle' is not valid\",</p> <p>\"instance\": \"/v1/entities/location\",</p> <p>\"errors\": [</p> <pre><code>{\n\n  \"field\": \"location\\_type\",\n\n  \"message\": \"Must be one of: continent, kingdom, city, town, dungeon, building, room, wilderness\"\n\n}\n</code></pre> <p>]</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#http-status-codes","title":"HTTP Status Codes","text":"<p># Proper status codes, not 200 for everything</p> <p>class ErrorResponses:</p> <pre><code>BAD\\_REQUEST \\= (400, \"Invalid request format\")\n\nUNAUTHORIZED \\= (401, \"Authentication required\")\n\nFORBIDDEN \\= (403, \"Insufficient permissions\")\n\nNOT\\_FOUND \\= (404, \"Resource not found\")\n\nCONFLICT \\= (409, \"Resource version conflict\")\n\nUNPROCESSABLE \\= (422, \"Validation failed\")\n\nTOO\\_MANY\\_REQUESTS \\= (429, \"Rate limit exceeded\")\n\nINTERNAL\\_ERROR \\= (500, \"Internal server error\")\n\nBAD\\_GATEWAY \\= (502, \"Upstream service error\")\n\nSERVICE\\_UNAVAILABLE \\= (503, \"Service temporarily unavailable\")\n\nTIMEOUT \\= (504, \"Request timeout\")\n</code></pre>"},{"location":"dma-api-design-spec-v2/#error-categories","title":"Error Categories","text":"<p>from enum import Enum</p> <p>class ErrorCategory(Enum):</p> <pre><code>\\# Transient \\- can retry\n\nNETWORK\\_ERROR \\= \"network\\_error\"\n\nTIMEOUT \\= \"timeout\"\n\nRATE\\_LIMIT \\= \"rate\\_limit\"\n\nSERVICE\\_UNAVAILABLE \\= \"service\\_unavailable\"\n\n\n\n\\# Persistent \\- don't retry\n\nVALIDATION\\_ERROR \\= \"validation\\_error\"\n\nAUTHENTICATION\\_ERROR \\= \"auth\\_error\"\n\nPERMISSION\\_ERROR \\= \"permission\\_error\"\n\nNOT\\_FOUND \\= \"not\\_found\"\n\n\n\n\\# AI-specific\n\nLLM\\_ERROR \\= \"llm\\_error\"\n\nCONTENT\\_FILTER \\= \"content\\_filter\"\n\nTOKEN\\_LIMIT \\= \"token\\_limit\"\n</code></pre>"},{"location":"dma-api-design-spec-v2/#observability","title":"Observability","text":""},{"location":"dma-api-design-spec-v2/#required-labels","title":"Required Labels","text":"<p>Every metric and trace must include:</p> <p>standard_labels:</p> <p>- service: \"orchestrator|scribe|system_mastery|world_designer\"</p> <p>- environment: \"local|staging|production\"</p> <p>- version: \"2.0.0\"</p> <p>- method: \"endpoint or message_type\"</p> <p>- status: \"success|error\"</p> <p>- error_type: \"category if error\"</p>"},{"location":"dma-api-design-spec-v2/#key-metrics","title":"Key Metrics","text":"<p># Prometheus metrics</p> <p>from prometheus_client import Counter, Histogram, Gauge</p> <p># Request metrics</p> <p>request_duration \\= Histogram(</p> <pre><code>'dma\\_request\\_duration\\_seconds',\n\n'Request duration',\n\n\\['service', 'method', 'status'\\],\n\nbuckets=\\[0.1, 0.5, 1.0, 2.0, 5.0, 10.0\\]\n</code></pre> <p>)</p> <p>request_counter \\= Counter(</p> <pre><code>'dma\\_requests\\_total',\n\n'Total requests',\n\n\\['service', 'method', 'status'\\]\n</code></pre> <p>)</p> <p># Token usage</p> <p>tokens_used \\= Counter(</p> <pre><code>'dma\\_llm\\_tokens\\_total',\n\n'LLM tokens consumed',\n\n\\['service', 'model', 'operation'\\]\n</code></pre> <p>)</p> <p># Queue depth</p> <p>queue_depth \\= Gauge(</p> <pre><code>'dma\\_queue\\_depth',\n\n'Current queue depth',\n\n\\['stream', 'consumer\\_group'\\]\n</code></pre> <p>)</p>"},{"location":"dma-api-design-spec-v2/#trace-examples","title":"Trace Examples","text":"<p>from opentelemetry import trace</p> <p>tracer \\= trace.get_tracer(__name__)</p> <p>@app.post(\"/v1/prompts\")</p> <p>async def process_prompt(request: PromptRequest):</p> <pre><code>with tracer.start\\_as\\_current\\_span(\n\n    \"prompt\\_processing\",\n\n    attributes={\n\n        \"campaign\\_id\": request.context.campaign\\_id,\n\n        \"prompt\\_length\": len(request.prompt)\n\n    }\n\n) as span:\n\n    \\# Intent classification\n\n    with tracer.start\\_span(\"classify\\_intent\"):\n\n        intent \\= await classifier.classify(request.prompt)\n\n        span.set\\_attribute(\"intent\", intent.type)\n\n\n\n    \\# Task decomposition\n\n    with tracer.start\\_span(\"decompose\\_tasks\"):\n\n        tasks \\= await decompose\\_into\\_tasks(request, intent)\n\n        span.set\\_attribute(\"task\\_count\", len(tasks))\n\n\n\n    \\# Dispatch to agents\n\n    with tracer.start\\_span(\"dispatch\\_tasks\"):\n\n        results \\= await dispatch\\_to\\_agents(tasks)\n\n\n\n    return results\n</code></pre>"},{"location":"dma-api-design-spec-v2/#logging-standards","title":"Logging Standards","text":"<p>import structlog</p> <p>logger \\= structlog.get_logger()</p> <p># Structured logging with context</p> <p>logger.info(</p> <pre><code>\"task\\_completed\",\n\ntask\\_id=\"task\\_123\",\n\nagent=\"scribe\",\n\nduration\\_ms=234,\n\nentity\\_type=\"location\",\n\nentity\\_id=\"loc\\_789\"\n</code></pre> <p>)</p> <p># Error logging with full context</p> <p>logger.error(</p> <pre><code>\"task\\_failed\",\n\ntask\\_id=\"task\\_124\",\n\nagent=\"world\\_designer\",\n\nerror\\_type=\"llm\\_timeout\",\n\nerror\\_message=str(e),\n\ncorrelation\\_id=\"req\\_456\",\n\nretry\\_count=2\n</code></pre> <p>)</p>"},{"location":"dma-api-design-spec-v2/#api-contracts","title":"API Contracts","text":""},{"location":"dma-api-design-spec-v2/#json-schema-repository","title":"JSON Schema Repository","text":"<p>contracts/</p> <p>\u251c\u2500\u2500 v1/</p> <p>\u2502   \u251c\u2500\u2500 requests/</p> <p>\u2502   \u2502   \u251c\u2500\u2500 prompt_request.json</p> <p>\u2502   \u2502   \u251c\u2500\u2500 entity_create.json</p> <p>\u2502   \u2502   \u2514\u2500\u2500 search_request.json</p> <p>\u2502   \u251c\u2500\u2500 responses/</p> <p>\u2502   \u2502   \u251c\u2500\u2500 prompt_response.json</p> <p>\u2502   \u2502   \u251c\u2500\u2500 entity.json</p> <p>\u2502   \u2502   \u2514\u2500\u2500 error.json</p> <p>\u2502   \u2514\u2500\u2500 messages/</p> <p>\u2502       \u251c\u2500\u2500 agent_task.json</p> <p>\u2502       \u2514\u2500\u2500 agent_result.json</p> <p>\u2514\u2500\u2500 README.md</p>"},{"location":"dma-api-design-spec-v2/#example-schema","title":"Example Schema","text":"<p>{</p> <p>\"$schema\": \"http://json-schema.org/draft-07/schema#\",</p> <p>\"$id\": \"https://api.dma.com/schemas/v1/prompt_request.json\",</p> <p>\"title\": \"PromptRequest\",</p> <p>\"type\": \"object\",</p> <p>\"required\": [\"prompt\", \"context\"],</p> <p>\"properties\": {</p> <pre><code>\"prompt\": {\n\n  \"type\": \"string\",\n\n  \"minLength\": 1,\n\n  \"maxLength\": 5000\n\n},\n\n\"context\": {\n\n  \"type\": \"object\",\n\n  \"required\": \\[\"campaign\\_id\"\\],\n\n  \"properties\": {\n\n    \"campaign\\_id\": {\n\n      \"type\": \"string\",\n\n      \"format\": \"uuid\"\n\n    },\n\n    \"location\\_id\": {\n\n      \"type\": \"string\",\n\n      \"format\": \"uuid\"\n\n    },\n\n    \"session\\_id\": {\n\n      \"type\": \"string\",\n\n      \"format\": \"uuid\"\n\n    }\n\n  }\n\n},\n\n\"options\": {\n\n  \"type\": \"object\",\n\n  \"properties\": {\n\n    \"timeout\\_ms\": {\n\n      \"type\": \"integer\",\n\n      \"minimum\": 1000,\n\n      \"maximum\": 60000,\n\n      \"default\": 30000\n\n    },\n\n    \"include\\_stats\": {\n\n      \"type\": \"boolean\",\n\n      \"default\": false\n\n    }\n\n  }\n\n}\n</code></pre> <p>}</p> <p>}</p>"},{"location":"dma-api-design-spec-v2/#contract-testing","title":"Contract Testing","text":"<p># tests/contract/test_api_contracts.py</p> <p>import json</p> <p>from jsonschema import validate</p> <p>import pytest</p> <p>class TestAPIContracts:</p> <pre><code>@pytest.fixture\n\ndef schemas(self):\n\n    \"\"\"Load all schemas\"\"\"\n\n    schemas \\= {}\n\n    for schema\\_file in Path(\"contracts/v1\").rglob(\"\\*.json\"):\n\n        with open(schema\\_file) as f:\n\n            schema \\= json.load(f)\n\n            schemas\\[schema\\[\"$id\"\\]\\] \\= schema\n\n    return schemas\n\n\n\ndef test\\_prompt\\_request\\_valid(self, schemas):\n\n    \"\"\"Test valid prompt request\"\"\"\n\n    request \\= {\n\n        \"prompt\": \"Describe the dungeon\",\n\n        \"context\": {\n\n            \"campaign\\_id\": \"123e4567-e89b-12d3-a456-426614174000\"\n\n        }\n\n    }\n\n\n\n    schema \\= schemas\\[\"https://api.dma.com/schemas/v1/prompt\\_request.json\"\\]\n\n    validate(instance=request, schema=schema)  \\# Should not raise\n\n\n\ndef test\\_prompt\\_request\\_invalid(self, schemas):\n\n    \"\"\"Test invalid prompt request\"\"\"\n\n    request \\= {\n\n        \"prompt\": \"\",  \\# Empty prompt\n\n        \"context\": {}  \\# Missing campaign\\_id\n\n    }\n\n\n\n    schema \\= schemas\\[\"https://api.dma.com/schemas/v1/prompt\\_request.json\"\\]\n\n    with pytest.raises(ValidationError):\n\n        validate(instance=request, schema=schema)\n</code></pre>"},{"location":"dma-api-design-spec-v2/#implementation-checklist","title":"Implementation Checklist","text":""},{"location":"dma-api-design-spec-v2/#week-1-foundation","title":"Week 1: Foundation","text":"<ul> <li>[ ] Set up FastAPI with proper structure  </li> <li>[ ] Implement authentication middleware  </li> <li>[ ] Configure Redis Streams  </li> <li>[ ] Create base error handling  </li> <li>[ ] Set up Prometheus metrics  </li> <li>[ ] Define JSON schemas</li> </ul>"},{"location":"dma-api-design-spec-v2/#week-2-core-apis","title":"Week 2: Core APIs","text":"<ul> <li>[ ] Implement <code>/v1/prompts</code> endpoints  </li> <li>[ ] Implement <code>/v1/entities</code> CRUD  </li> <li>[ ] Implement <code>/v1/search</code> </li> <li>[ ] Create message bus publisher  </li> <li>[ ] Add request validation  </li> <li>[ ] Write initial tests</li> </ul>"},{"location":"dma-api-design-spec-v2/#week-3-fast-lane","title":"Week 3: Fast Lane","text":"<ul> <li>[ ] Build rule cache loader  </li> <li>[ ] Implement THAC0 endpoint  </li> <li>[ ] Implement saving throws endpoint  </li> <li>[ ] Implement AC calculation  </li> <li>[ ] Add cache warming  </li> <li>[ ] Performance test \\&lt; 500ms</li> </ul>"},{"location":"dma-api-design-spec-v2/#week-4-integration","title":"Week 4: Integration","text":"<ul> <li>[ ] Connect Orchestrator to agents  </li> <li>[ ] Implement message consumers  </li> <li>[ ] Add circuit breakers  </li> <li>[ ] Set up OpenTelemetry  </li> <li>[ ] Contract testing suite  </li> <li>[ ] Load testing</li> </ul>"},{"location":"dma-api-design-spec-v2/#week-5-hardening","title":"Week 5: Hardening","text":"<ul> <li>[ ] Security audit  </li> <li>[ ] Rate limiting  </li> <li>[ ] DLQ monitoring  </li> <li>[ ] Documentation  </li> <li>[ ] Docker packaging  </li> <li>[ ] Final testing</li> </ul>"},{"location":"dma-api-design-spec-v2/#key-improvements-from-v1","title":"Key Improvements from v1","text":"<ol> <li>Focused on MVC: Only 3 agents, single database  </li> <li>Redis Streams: Replaced unreliable Pub/Sub  </li> <li>Fast Lane API: Sub-500ms operations documented  </li> <li>Proper HTTP codes: Not everything returns 200  </li> <li>Machine-readable contracts: JSON Schema validation  </li> <li>Required auth: Even for local development  </li> <li>Clear observability: Specific labels and traces  </li> <li>Version prefix: <code>/v1/</code> on all endpoints  </li> <li>Pagination: Default limits on list operations  </li> <li>5-week timeline: Realistic implementation plan</li> </ol> <p>This specification provides a complete, implementable API design that can ship in Q3 2025 while maintaining quality and performance standards.  </p>"},{"location":"dma-plan-v2/","title":"Dungeon Master's Assistant (DMA) Plan v2","text":"<p>Version: 2.0 (Strategic Engineering Revision) Date: June 27, 2025 Author: J.P. Dow Based on: Strategic Engineering Critique &amp; Original DMA Plan</p>"},{"location":"dma-plan-v2/#executive-summary-strategic-focus","title":"Executive Summary &amp; Strategic Focus","text":"<p>The Dungeon Master's Assistant (DMA) is a multi-agent AI system designed to enhance Advanced Dungeons &amp; Dragons 2nd Edition campaign management through intelligent automation and real-time assistance. This revised plan prioritizes disciplined scope management, performance-first architecture, and rapid delivery of demonstrable value based on strategic engineering feedback.</p> <p>Core Value Proposition: Enable DMs to run richer, more immersive AD\\&amp;D 2e campaigns by automating routine tasks, maintaining lore consistency, and providing intelligent real-time assistance during live play.</p> <p>Success Metrics:</p> <ul> <li>Minimum Viable Campaign (MVC): Complete a 3-hour one-shot with zero system crashes  </li> <li>Performance Target: \\&lt; 2s response time for 95% of live gameplay prompts  </li> <li>User Satisfaction: 80% DM satisfaction on weekly surveys by Q1 2026</li> </ul>"},{"location":"dma-plan-v2/#1-scope-mvp-discipline","title":"1. Scope &amp; MVP Discipline","text":""},{"location":"dma-plan-v2/#phase-1-minimum-viable-campaign-mvc-q3-2025","title":"Phase 1: Minimum Viable Campaign (MVC) - Q3 2025","text":"<p>Disciplined Scope - Only Essential Components:</p>"},{"location":"dma-plan-v2/#core-architecture-3-components-only","title":"Core Architecture (3 Components Only)","text":"<ol> <li>Orchestrator - Central coordination engine  </li> <li>Central Knowledge Base (CKB) - Single PostgreSQL instance  </li> <li>Fast Lane RPC Service - Direct latency-critical operations</li> </ol>"},{"location":"dma-plan-v2/#essential-agents-3-only","title":"Essential Agents (3 Only)","text":"<ol> <li>Scribe &amp; Archivist - Data management and retrieval  </li> <li>System Mastery - AD\\&amp;D 2e rules and mechanics  </li> <li>World &amp; Encounter Designer - Basic content generation</li> </ol>"},{"location":"dma-plan-v2/#external-dependencies-minimal","title":"External Dependencies (Minimal)","text":"<ul> <li>Single LLM Provider: OpenAI GPT-4 (primary), Claude Sonnet 4 (backup)  </li> <li>No integrations in MVC (Foundry, World Anvil, etc. deferred to Phase 2)  </li> <li>Local deployment only (Docker Compose)</li> </ul>"},{"location":"dma-plan-v2/#deferred-to-later-phases","title":"Deferred to Later Phases","text":"<ul> <li>Storytelling &amp; Narrative Controller  </li> <li>Visual Assets &amp; Immersion Architect  </li> <li>Player Management &amp; Psychology Agent  </li> <li>Performance &amp; Atmosphere Agent  </li> <li>Tool &amp; System Use Agent  </li> <li>Advanced Content Creation Agent  </li> <li>All external tool integrations  </li> <li>Cloud deployment  </li> <li>Multi-database engines</li> </ul>"},{"location":"dma-plan-v2/#2-performance-first-architecture","title":"2. Performance-First Architecture","text":""},{"location":"dma-plan-v2/#latency-optimization-strategy","title":"Latency Optimization Strategy","text":""},{"location":"dma-plan-v2/#fast-lane-architecture","title":"Fast Lane Architecture","text":"<p>DM Input \u2192 Orchestrator \u2192 Fast Lane RPC \u2192 Response (\\&lt; 1s)</p> <pre><code>                 \u2198 Event Bus \u2192 Agent Processing (async)\n</code></pre> <p>Fast Lane Operations:</p> <ul> <li>THAC0 calculations  </li> <li>Spell/item lookups  </li> <li>Basic rule checks  </li> <li>Combat mechanics</li> </ul> <p>Event Bus Operations:</p> <ul> <li>Complex content generation  </li> <li>Lore consistency checks  </li> <li>Multi-agent coordination</li> </ul>"},{"location":"dma-plan-v2/#response-time-error-budgets","title":"Response Time Error Budgets","text":"<ul> <li>Critical Operations: \\&lt; 500ms (combat mechanics, rule lookups)  </li> <li>Standard Operations: \\&lt; 2s (descriptions, basic generation)  </li> <li>Complex Generation: \\&lt; 10s (detailed encounters, lore synthesis)  </li> <li>Background Tasks: No limit (bulk content generation)</li> </ul>"},{"location":"dma-plan-v2/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Real-time Metrics: E2E timing from UI keystroke to response  </li> <li>Load Testing: Simulated high-usage scenarios during development  </li> <li>Performance Regression Tests: Automated CI/CD performance gates</li> </ul>"},{"location":"dma-plan-v2/#3-simplified-data-model","title":"3. Simplified Data Model","text":""},{"location":"dma-plan-v2/#progressive-disclosure-data-strategy","title":"Progressive Disclosure Data Strategy","text":""},{"location":"dma-plan-v2/#core-entities-required-fields-only","title":"Core Entities (Required Fields Only)","text":"<p>{</p> <p>\"id\": \"unique_identifier\",</p> <p>\"name\": \"display_name\", </p> <p>\"type\": \"entity_type\",</p> <p>\"visibility\": \"public|private\",</p> <p>\"content\": \"basic_description\"</p> <p>}</p>"},{"location":"dma-plan-v2/#extended-properties-optional","title":"Extended Properties (Optional)","text":"<ul> <li>Relationships, detailed stats, rich descriptions added incrementally  </li> <li>UI enforces progressive disclosure - start simple, add complexity as needed  </li> <li>Soft validation on core fields only</li> </ul>"},{"location":"dma-plan-v2/#single-database-technology","title":"Single Database Technology","text":"<ul> <li>PostgreSQL with JSONB for flexible schema evolution  </li> <li>Vector extensions for semantic search  </li> <li>Graph queries via recursive CTEs  </li> <li>Defer specialized graph databases (Neo4j) to Phase 2+</li> </ul>"},{"location":"dma-plan-v2/#4-legal-cost-management","title":"4. Legal &amp; Cost Management","text":""},{"location":"dma-plan-v2/#add-2e-content-strategy","title":"AD\\&amp;D 2e Content Strategy","text":"<ul> <li>No copyrighted content stored in system  </li> <li>DM-provided PDFs processed locally with OCR  </li> <li>Derived tables only (THAC0, saves, XP charts calculated independently)  </li> <li>Open-source training on publicly available SRD content only</li> </ul>"},{"location":"dma-plan-v2/#llm-cost-controls","title":"LLM Cost Controls","text":"<ul> <li>Central metering service tracks token usage per session  </li> <li>Usage dashboards show real-time burn rate to DMs  </li> <li>Pluggable provider abstraction for easy model switching  </li> <li>Cost alerts at configurable spending thresholds</li> </ul>"},{"location":"dma-plan-v2/#5-security-authentication-foundation","title":"5. Security &amp; Authentication Foundation","text":""},{"location":"dma-plan-v2/#security-architecture-built-from-day-1","title":"Security Architecture (Built from Day 1)","text":"<ul> <li>JWT-based service-to-service auth for all internal APIs  </li> <li>API key rotation for external LLM providers  </li> <li>Encrypted data at rest (AES-256)  </li> <li>TLS 1.3 for all network communication  </li> <li>RBAC for CKB access control</li> </ul>"},{"location":"dma-plan-v2/#secret-management","title":"Secret Management","text":"<ul> <li>HashiCorp Vault or cloud-native secret management  </li> <li>No hardcoded secrets in containers  </li> <li>Automated secret rotation where supported</li> </ul>"},{"location":"dma-plan-v2/#6-quality-assurance-testing","title":"6. Quality Assurance &amp; Testing","text":""},{"location":"dma-plan-v2/#automated-testing-pipeline","title":"Automated Testing Pipeline","text":""},{"location":"dma-plan-v2/#schema-tests","title":"Schema Tests","text":"<p>def test_agent_ckb_roundtrip():</p> <pre><code>\\# Generate content \u2192 Store in CKB \u2192 Retrieve \u2192 Validate JSON Schema\n\nassert round\\_trip\\_data\\_integrity()\n</code></pre>"},{"location":"dma-plan-v2/#rules-regression-tests","title":"Rules Regression Tests","text":"<p>def test_combat_mechanics_consistency():</p> <pre><code>\\# Same combat scenario must yield same probabilities\n\nassert thac0\\_calculation(scenario) \\== expected\\_result\n</code></pre>"},{"location":"dma-plan-v2/#performance-tests","title":"Performance Tests","text":"<ul> <li>Load testing simulating concurrent DM sessions  </li> <li>Stress testing with complex multi-agent workflows  </li> <li>CI/CD performance gates preventing regression</li> </ul>"},{"location":"dma-plan-v2/#llm-output-validation","title":"LLM Output Validation","text":"<ul> <li>Golden file tests for consistent generation quality  </li> <li>Schema validation for all structured outputs  </li> <li>Toxicity/safety screening for generated content</li> </ul>"},{"location":"dma-plan-v2/#7-observability-slos","title":"7. Observability &amp; SLOs","text":""},{"location":"dma-plan-v2/#service-level-objectives-slos","title":"Service Level Objectives (SLOs)","text":"<ol> <li>Availability: 99.5% uptime during scheduled play sessions  </li> <li>Latency: 90th percentile response time \\&lt; 2s  </li> <li>Accuracy: 95% rules lookups return correct results  </li> <li>Consistency: 99% lore generation maintains CKB consistency</li> </ol>"},{"location":"dma-plan-v2/#monitoring-stack","title":"Monitoring Stack","text":"<ul> <li>Prometheus - Metrics collection  </li> <li>Grafana - Dashboards and alerting  </li> <li>Jaeger - Distributed tracing  </li> <li>ELK Stack - Centralized logging</li> </ul>"},{"location":"dma-plan-v2/#key-metrics","title":"Key Metrics","text":"<ul> <li>Request latency (p50, p90, p95, p99)  </li> <li>Error rates by service and endpoint  </li> <li>LLM token usage and cost  </li> <li>User engagement and satisfaction</li> </ul>"},{"location":"dma-plan-v2/#8-human-in-the-loop-ux-design","title":"8. Human-in-the-Loop UX Design","text":""},{"location":"dma-plan-v2/#dm-control-mechanisms","title":"DM Control Mechanisms","text":""},{"location":"dma-plan-v2/#acceptreject-interface","title":"Accept/Reject Interface","text":"<p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</p> <p>\u2502 Agent Suggestion: [Content Preview] \u2502</p> <p>\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502</p> <p>\u2502 \u2502 Accept  \u2502 \u2502 Edit    \u2502 \u2502 Reject  \u2502\u2502</p> <p>\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502</p> <p>\u2502 Source: World Designer, 42 tokens  \u2502</p> <p>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>"},{"location":"dma-plan-v2/#provenance-tracking","title":"Provenance Tracking","text":"<ul> <li>Source attribution for every generated element  </li> <li>Edit history with rollback capabilities  </li> <li>Confidence scoring from generating agents  </li> <li>Bias controls for agent behavior tuning</li> </ul>"},{"location":"dma-plan-v2/#inline-editing","title":"Inline Editing","text":"<ul> <li>Real-time collaboration between DM and AI  </li> <li>Suggestion modes (conservative, balanced, creative)  </li> <li>Template libraries for common scenarios</li> </ul>"},{"location":"dma-plan-v2/#9-delivery-milestones-roadmap","title":"9. Delivery Milestones &amp; Roadmap","text":""},{"location":"dma-plan-v2/#q3-2025-mvc-delivery","title":"Q3 2025: MVC Delivery","text":"<p>Goal: Run a complete 3-hour one-shot with zero crashes</p> <p>Deliverables:</p> <ul> <li>Orchestrator with fast lane architecture  </li> <li>PostgreSQL CKB with core entity types  </li> <li>3 essential agents (Scribe, System Mastery, World Designer)  </li> <li>Local Docker Compose deployment  </li> <li>Basic web UI with accept/reject controls</li> </ul> <p>Success Criteria:</p> <ul> <li>All combat mechanics calculate correctly  </li> <li>Lore consistency maintained across session  </li> <li>\\&lt; 2s response time for 95% of operations</li> </ul>"},{"location":"dma-plan-v2/#q4-2025-cloud-alpha","title":"Q4 2025: Cloud Alpha","text":"<p>Goal: 95% uptime with \\&lt; 2s latency for live prompts</p> <p>Deliverables:</p> <ul> <li>Cloud deployment on single provider (AWS/GCP)  </li> <li>Enhanced UI with provenance tracking  </li> <li>Basic Foundry VTT integration  </li> <li>Automated testing pipeline</li> </ul> <p>Success Criteria:</p> <ul> <li>10 concurrent DM alpha testers  </li> <li>Performance SLOs consistently met  </li> <li>Positive user feedback (&gt;70% satisfaction)</li> </ul>"},{"location":"dma-plan-v2/#q1-2026-feature-expansion","title":"Q1 2026: Feature Expansion","text":"<p>Goal: 80% DM satisfaction on weekly surveys</p> <p>Deliverables:</p> <ul> <li>Additional agents (Storytelling, Visual Assets)  </li> <li>External tool integrations (World Anvil, Notion)  </li> <li>Advanced customization options  </li> <li>Performance optimizations</li> </ul> <p>Success Criteria:</p> <ul> <li>100+ active DMs using the system  </li> <li>80% user satisfaction rating  </li> <li>Sub-second response times for critical operations</li> </ul>"},{"location":"dma-plan-v2/#10-implementation-strategy","title":"10. Implementation Strategy","text":""},{"location":"dma-plan-v2/#development-approach","title":"Development Approach","text":"<ol> <li>Sprint Duration: 2-week sprints  </li> <li>Team Structure: Small, cross-functional teams (2-3 engineers per component)  </li> <li>Definition of Done: All features must pass automated tests + manual QA  </li> <li>Technical Debt: 20% of each sprint reserved for refactoring</li> </ol>"},{"location":"dma-plan-v2/#risk-mitigation","title":"Risk Mitigation","text":"<ul> <li>Weekly architecture reviews to prevent scope creep  </li> <li>Bi-weekly user testing with real DMs  </li> <li>Monthly cost reviews and provider evaluations  </li> <li>Quarterly security audits</li> </ul>"},{"location":"dma-plan-v2/#community-strategy","title":"Community Strategy","text":"<ul> <li>Open-source core components to encourage community contributions  </li> <li>Public roadmap with quarterly updates  </li> <li>Beta testing program with experienced DMs  </li> <li>Documentation-first approach for all APIs and features</li> </ul>"},{"location":"dma-plan-v2/#conclusion","title":"Conclusion","text":"<p>This engineering-focused revision of the DMA plan prioritizes shipping working software over comprehensive features. By ruthlessly focusing on the Minimum Viable Campaign, implementing performance-first architecture, and building quality assurance from day one, we can deliver a product that provides immediate value to DMs while establishing a foundation for future expansion.</p> <p>The key insight from the strategic critique is that each deferred agent represents a month gained on shipping a delightful user experience. This plan embraces that philosophy while ensuring we build the right architectural foundations for long-term success.</p> <p>Next Steps:</p> <ol> <li>Finalize technical architecture specifications  </li> <li>Set up development environment and CI/CD pipeline  </li> <li>Begin MVC implementation with Orchestrator core  </li> <li>Establish user testing program with target DMs  </li> <li>Create detailed API specifications and data schemas</li> </ol> <p>Success will be measured not by feature completeness, but by the ability to enhance real DM experiences in live gameplay sessions.  </p>"},{"location":"dma-technical-design-v2/","title":"DMA Technical Design v2.0 - Engineering-Focused Rewrite Guide","text":"<p>Version: 2.0 (Engineering-Focused Revision) Date: June 27, 2025 Status: Complete Rewrite Guidelines Based on Engineering Critique</p>"},{"location":"dma-technical-design-v2/#executive-summary-of-changes","title":"Executive Summary of Changes","text":"<p>This document provides specific guidance for rewriting the DMA Technical Design to address critical engineering concerns identified in the review. The primary focus is on reducing complexity, improving performance, and ensuring deliverability of the Minimum Viable Campaign (MVC).</p>"},{"location":"dma-technical-design-v2/#1-architecture-technology-stack-simplification","title":"1. Architecture &amp; Technology Stack Simplification","text":""},{"location":"dma-technical-design-v2/#current-issues","title":"Current Issues","text":"<ul> <li>Mixing multiple messaging patterns (Redis Pub/Sub, RabbitMQ references)  </li> <li>Unclear database strategy (PostgreSQL + graph references)  </li> <li>Overly complex workflow orchestration</li> </ul>"},{"location":"dma-technical-design-v2/#rewrite-guidelines","title":"Rewrite Guidelines","text":""},{"location":"dma-technical-design-v2/#message-bus-architecture","title":"Message Bus Architecture","text":"<p>Replace all Redis Pub/Sub references with Redis Streams:</p> <p># REMOVE: Redis Pub/Sub pattern</p> <p>redis_client.publish('agent.task', json.dumps(task))</p> <p># REPLACE WITH: Redis Streams</p> <p>redis_client.xadd(</p> <pre><code>'task-stream',\n\n{\n\n    'task\\_id': task\\_id,\n\n    'agent': 'scribe',\n\n    'payload': json.dumps(task),\n\n    'correlation\\_id': correlation\\_id\n\n},\n\nmaxlen=10000  \\# Automatic trimming\n</code></pre> <p>)</p> <p>Rationale: Redis Streams provide persistence, ordering, consumer groups, and dead-letter queues out of the box.</p>"},{"location":"dma-technical-design-v2/#database-strategy-clarification","title":"Database Strategy Clarification","text":"<p>Remove all Neo4j/Cypher references. Use PostgreSQL exclusively:</p> <p>-- Graph-like queries using recursive CTEs</p> <p>WITH RECURSIVE related_entities AS (</p> <pre><code>SELECT id, name, type, 1 as depth\n\nFROM entities\n\nWHERE id \\= $1\n\n\n\nUNION ALL\n\n\n\nSELECT e.id, e.name, e.type, re.depth \\+ 1\n\nFROM entities e\n\nINNER JOIN relationships r ON e.id \\= r.target\\_id\n\nINNER JOIN related\\_entities re ON r.source\\_id \\= re.id\n\nWHERE re.depth \\&lt; 3\n</code></pre> <p>)</p> <p>SELECT * FROM related_entities;</p> <p>Add to Design:</p> <ul> <li>Clear statement: \"PostgreSQL is the ONLY database for v0.1\"  </li> <li>Document pgvector usage for semantic search  </li> <li>Show JSONB schema evolution patterns</li> </ul>"},{"location":"dma-technical-design-v2/#2-orchestrator-optimization","title":"2. Orchestrator Optimization","text":""},{"location":"dma-technical-design-v2/#current-issues_1","title":"Current Issues","text":"<ul> <li>LLM calls for intent classification (expensive)  </li> <li>Conflated scheduling and queue management  </li> <li>Missing fast-lane implementation</li> </ul>"},{"location":"dma-technical-design-v2/#rewrite-guidelines_1","title":"Rewrite Guidelines","text":""},{"location":"dma-technical-design-v2/#intent-classification-without-llm","title":"Intent Classification Without LLM","text":"<p>class IntentClassifier:</p> <pre><code>def \\_\\_init\\_\\_(self):\n\n    \\# Use lightweight local model\n\n    self.classifier \\= pipeline(\n\n        \"text-classification\",\n\n        model=\"microsoft/deberta-v3-small\"\n\n    )\n\n    self.intent\\_cache \\= TTLCache(maxsize=1000, ttl=3600)\n\n\n\ndef classify(self, prompt: str) \\-\\&gt; Intent:\n\n    \\# Check cache first\n\n    cache\\_key \\= hash(prompt.lower().strip())\n\n    if cache\\_key in self.intent\\_cache:\n\n        return self.intent\\_cache\\[cache\\_key\\]\n\n\n\n    \\# Local classification (no API call)\n\n    result \\= self.classifier(prompt)\n\n    intent \\= Intent(\n\n        type=result\\[0\\]\\['label'\\],\n\n        confidence=result\\[0\\]\\['score'\\]\n\n    )\n\n\n\n    self.intent\\_cache\\[cache\\_key\\] \\= intent\n\n    return intent\n</code></pre>"},{"location":"dma-technical-design-v2/#fast-lane-rpc-implementation","title":"Fast-Lane RPC Implementation","text":"<p>Add dedicated section for fast-lane operations:</p> <p>@app.get(\"/v1/fast/{operation}\")</p> <p>async def fast_lane_operation(</p> <pre><code>operation: str,\n\nparams: dict \\= Depends()\n</code></pre> <p>):</p> <pre><code>\"\"\"\n\nBypasses event bus for sub-500ms operations:\n\n\\- THAC0 calculations\n\n\\- Saving throw lookups\n\n\\- Simple spell effects\n\n\"\"\"\n\nif operation in FAST\\_OPERATIONS:\n\n    return FAST\\_OPERATIONS\\[operation\\](\\*\\*params)\n\nelse:\n\n    raise HTTPException(404, \"Operation not in fast lane\")\n</code></pre> <p># In-memory rule cache</p> <p>FAST_OPERATIONS \\= {</p> <pre><code>'thac0': calculate\\_thac0,\n\n'save': lookup\\_saving\\_throw,\n\n'ac': calculate\\_armor\\_class\n</code></pre> <p>}</p>"},{"location":"dma-technical-design-v2/#3-agent-simplification","title":"3. Agent Simplification","text":""},{"location":"dma-technical-design-v2/#current-issues_2","title":"Current Issues","text":"<ul> <li>Too many agents for MVC  </li> <li>Incomplete agent specifications  </li> <li>Complex inter-agent dependencies</li> </ul>"},{"location":"dma-technical-design-v2/#rewrite-guidelines_2","title":"Rewrite Guidelines","text":""},{"location":"dma-technical-design-v2/#remove-these-sections-entirely","title":"Remove These Sections Entirely:","text":"<ul> <li>Player Management &amp; Psychology Agent  </li> <li>Performance &amp; Atmosphere Agent  </li> <li>Tool &amp; System Use Agent  </li> <li>Visual Assets &amp; Immersion Architect  </li> <li>Improvisation &amp; Creativity Engine  </li> <li>Advanced Content Creation Agent</li> </ul> <p>Replace with: \"Future Agents (Post-MVC)\" section listing names only.</p>"},{"location":"dma-technical-design-v2/#focus-on-3-core-agents","title":"Focus on 3 Core Agents:","text":"<p>1. Scribe Agent (Simplified)</p> <p>class ScribeAgent:</p> <pre><code>\"\"\"\n\nMinimal viable Scribe \\- data in/out only\n\nNo external sync, no complex parsing\n\n\"\"\"\n\nasync def handle\\_task(self, task: ScribeTask):\n\n    match task.type:\n\n        case TaskType.STORE:\n\n            return await self.store\\_entity(task.payload)\n\n        case TaskType.RETRIEVE:\n\n            return await self.get\\_entity(task.entity\\_id)\n\n        case TaskType.SEARCH:\n\n            return await self.search\\_entities(task.query)\n</code></pre> <p>2. System Mastery Agent (Rules Only)</p> <p>class SystemMasteryAgent:</p> <pre><code>\"\"\"\n\nAD\\&amp;D 2e rules \\- no balance analysis, no recommendations\n\n\"\"\"\n\ndef \\_\\_init\\_\\_(self):\n\n    \\# Load rules from static JSON files\n\n    self.rules \\= load\\_rules\\_from\\_json()\n\n    self.tables \\= load\\_tables\\_from\\_json()\n\n\n\nasync def lookup(self, rule\\_type: str, params: dict):\n\n    \\# Direct lookup, no LLM interpretation\n\n    return self.rules.get(rule\\_type, params)\n</code></pre> <p>3. World Designer (Basic Generation)</p> <ul> <li>Simple template-based generation  </li> <li>No complex narrative analysis  </li> <li>Focus on usable game content</li> </ul>"},{"location":"dma-technical-design-v2/#4-communication-protocol-refinement","title":"4. Communication Protocol Refinement","text":""},{"location":"dma-technical-design-v2/#current-issues_3","title":"Current Issues","text":"<ul> <li>Complex message schemas  </li> <li>No idempotency handling  </li> <li>Missing work-token specification</li> </ul>"},{"location":"dma-technical-design-v2/#rewrite-guidelines_3","title":"Rewrite Guidelines","text":""},{"location":"dma-technical-design-v2/#simplified-event-schema","title":"Simplified Event Schema","text":"<p>{</p> <p>\"event_id\": \"uuid\",</p> <p>\"correlation_id\": \"uuid\",</p> <p>\"idempotency_key\": \"hash\",</p> <p>\"timestamp\": \"ISO8601\",</p> <p>\"source\": \"orchestrator\",</p> <p>\"target\": \"scribe\", </p> <p>\"type\": \"entity.store\",</p> <p>\"payload\": {},</p> <p>\"auth\": {</p> <pre><code>\"work\\_token\": \"jwt\",\n\n\"expires\\_at\": \"ISO8601\"\n</code></pre> <p>}</p> <p>}</p>"},{"location":"dma-technical-design-v2/#work-token-implementation","title":"Work Token Implementation","text":"<p>class WorkTokenService:</p> <pre><code>\"\"\"\n\nTask-scoped tokens for agent authentication\n\n\"\"\"\n\ndef create\\_work\\_token(\n\n    self,\n\n    task\\_id: str,\n\n    agent: str,\n\n    ttl\\_seconds: int \\= 300\n\n) \\-\\&gt; str:\n\n    payload \\= {\n\n        'task\\_id': task\\_id,\n\n        'agent': agent,\n\n        'exp': time.time() \\+ ttl\\_seconds,\n\n        'iat': time.time()\n\n    }\n\n    return jwt.encode(payload, self.secret, algorithm='HS256')\n</code></pre>"},{"location":"dma-technical-design-v2/#5-shared-resilience-package","title":"5. Shared Resilience Package","text":""},{"location":"dma-technical-design-v2/#current-issue","title":"Current Issue","text":"<ul> <li>Circuit breakers only in documentation</li> </ul>"},{"location":"dma-technical-design-v2/#rewrite-guidelines_4","title":"Rewrite Guidelines","text":"<p>Create <code>dma-shared-resilience</code> package specification:</p> <p># dma_shared_resilience/__init__.py</p> <p>from .circuit_breaker import CircuitBreaker</p> <p>from .bulkhead import Bulkhead</p> <p>from .retry import RetryWithBackoff</p> <p>__all__ \\= ['CircuitBreaker', 'Bulkhead', 'RetryWithBackoff']</p> <p># Usage in any agent:</p> <p>from dma_shared_resilience import CircuitBreaker</p> <p>class MyAgent:</p> <pre><code>def \\_\\_init\\_\\_(self):\n\n    self.llm\\_breaker \\= CircuitBreaker(\n\n        failure\\_threshold=5,\n\n        recovery\\_timeout=60,\n\n        expected\\_exception=LLMException\n\n    )\n\n\n\n@self.llm\\_breaker\n\nasync def call\\_llm(self, prompt):\n\n    return await self.llm\\_client.generate(prompt)\n</code></pre>"},{"location":"dma-technical-design-v2/#6-testing-strategy","title":"6. Testing Strategy","text":""},{"location":"dma-technical-design-v2/#current-issues_4","title":"Current Issues","text":"<ul> <li>No contract testing  </li> <li>Missing replay harness  </li> <li>No performance regression tests</li> </ul>"},{"location":"dma-technical-design-v2/#rewrite-guidelines_5","title":"Rewrite Guidelines","text":""},{"location":"dma-technical-design-v2/#contract-testing-framework","title":"Contract Testing Framework","text":"<p># contracts/events/task.request.yaml</p> <p>name: task.request</p> <p>version: 1.0.0</p> <p>fields:</p> <p>- name: event_id</p> <pre><code>type: uuid\n\nrequired: true\n</code></pre> <p>- name: correlation_id</p> <pre><code>type: uuid\n\nrequired: true\n</code></pre> <p>- name: payload</p> <pre><code>type: object\n\nrequired: true\n\nschema: ./schemas/task\\_payload.json\n</code></pre>"},{"location":"dma-technical-design-v2/#replay-test-harness","title":"Replay Test Harness","text":"<p>class ReplayHarness:</p> <pre><code>\"\"\"\n\nRecords and replays event streams for testing\n\n\"\"\"\n\ndef record\\_session(self, session\\_id: str):\n\n    \\# Capture all events to file\n\n    pass\n\n\n\ndef replay\\_session(self, recording\\_path: str):\n\n    \\# Replay events, verify same outcomes\n\n    pass\n</code></pre> <p># In CI/CD:</p> <p>@pytest.mark.replay</p> <p>def test_combat_sequence_replay():</p> <pre><code>harness \\= ReplayHarness()\n\nresult \\= harness.replay\\_session('fixtures/combat\\_sequence.json')\n\nassert result.final\\_state \\== expected\\_state\n</code></pre>"},{"location":"dma-technical-design-v2/#7-performance-specifications","title":"7. Performance Specifications","text":""},{"location":"dma-technical-design-v2/#current-issues_5","title":"Current Issues","text":"<ul> <li>Unrealistic latency targets  </li> <li>No streaming for long operations</li> </ul>"},{"location":"dma-technical-design-v2/#rewrite-guidelines_6","title":"Rewrite Guidelines","text":""},{"location":"dma-technical-design-v2/#realistic-performance-targets","title":"Realistic Performance Targets","text":"<p>performance_slos:</p> <p>fast_lane:</p> <pre><code>\\- operation: thac0\\_lookup\n\n  p99\\_latency\\_ms: 100\n\n  availability: 99.9%\n</code></pre> <p>standard:</p> <pre><code>\\- operation: generate\\_npc\n\n  p99\\_latency\\_ms: 2000\n\n  availability: 99%\n</code></pre> <p>complex:</p> <pre><code>\\- operation: generate\\_dungeon\n\n  p99\\_latency\\_ms: 15000\n\n  streaming: true\n\n  availability: 95%\n</code></pre>"},{"location":"dma-technical-design-v2/#streaming-implementation","title":"Streaming Implementation","text":"<p>@app.post(\"/v1/generate/dungeon\", response_class=StreamingResponse)</p> <p>async def generate_dungeon_streaming(request: DungeonRequest):</p> <pre><code>async def generate():\n\n    \\# Stream layout immediately\n\n    layout \\= await generate\\_layout(request)\n\n    yield f\"data: {json.dumps({'type': 'layout', 'data': layout})}\\\\n\\\\n\"\n\n\n\n    \\# Stream rooms as generated\n\n    async for room in generate\\_rooms(layout):\n\n        yield f\"data: {json.dumps({'type': 'room', 'data': room})}\\\\n\\\\n\"\n\n\n\nreturn StreamingResponse(generate(), media\\_type=\"text/event-stream\")\n</code></pre>"},{"location":"dma-technical-design-v2/#8-deployment-infrastructure","title":"8. Deployment &amp; Infrastructure","text":""},{"location":"dma-technical-design-v2/#current-issues_6","title":"Current Issues","text":"<ul> <li>Complex hybrid deployment for MVC  </li> <li>Multiple infrastructure dependencies</li> </ul>"},{"location":"dma-technical-design-v2/#rewrite-guidelines_7","title":"Rewrite Guidelines","text":""},{"location":"dma-technical-design-v2/#mvc-local-only","title":"MVC: Local Only","text":"<p># docker-compose.yml</p> <p>version: '3.8'</p> <p>services:</p> <p>orchestrator:</p> <pre><code>build: ./orchestrator\n\nports:\n\n  \\- \"8000:8000\"\n\ndepends\\_on:\n\n  \\- redis\n\n  \\- postgres\n</code></pre> <p>postgres:</p> <pre><code>image: postgres:15-alpine\n\nenvironment:\n\n  POSTGRES\\_DB: dma\n\n  POSTGRES\\_USER: dma\n\n  POSTGRES\\_PASSWORD: ${DB\\_PASSWORD}\n\nvolumes:\n\n  \\- ./data/postgres:/var/lib/postgresql/data\n</code></pre> <p>redis:</p> <pre><code>image: redis:7-alpine\n\ncommand: redis-server \\--appendonly yes\n\nvolumes:\n\n  \\- ./data/redis:/data\n</code></pre> <p># Agents as separate containers</p> <p>scribe:</p> <pre><code>build: ./agents/scribe\n\nenvironment:\n\n  REDIS\\_URL: redis://redis:6379\n\n  DATABASE\\_URL: postgresql://dma:${DB\\_PASSWORD}@postgres/dma\n</code></pre> <p>Remove: All cloud deployment sections for v0.1</p>"},{"location":"dma-technical-design-v2/#9-documentation-structure","title":"9. Documentation Structure","text":""},{"location":"dma-technical-design-v2/#rewrite-the-technical-design-into-these-focused-documents","title":"Rewrite the Technical Design into these focused documents:","text":"<ol> <li> <p>Core Architecture (15 pages max)  </p> </li> <li> <p>System overview  </p> </li> <li>Component responsibilities  </li> <li> <p>Data flow</p> </li> <li> <p>API Specification (10 pages)  </p> </li> <li> <p>Event schemas  </p> </li> <li>REST endpoints  </li> <li> <p>Authentication</p> </li> <li> <p>Agent Specifications (5 pages each)  </p> </li> <li> <p>Scribe Agent  </p> </li> <li>System Mastery Agent  </li> <li> <p>World Designer Agent</p> </li> <li> <p>Deployment Guide (5 pages)  </p> </li> <li> <p>Local setup only  </p> </li> <li>Docker Compose  </li> <li> <p>Quick start</p> </li> <li> <p>Developer Guide (10 pages)  </p> </li> <li> <p>Contributing guidelines  </p> </li> <li>Testing approach  </li> <li>Code standards</li> </ol>"},{"location":"dma-technical-design-v2/#10-implementation-priorities","title":"10. Implementation Priorities","text":""},{"location":"dma-technical-design-v2/#reorder-sections-to-reflect-actual-build-order","title":"Reorder sections to reflect actual build order:","text":"<ol> <li> <p>Week 1-2: Foundation </p> </li> <li> <p>PostgreSQL schema  </p> </li> <li>Redis Streams setup  </li> <li> <p>Basic Orchestrator shell</p> </li> <li> <p>Week 3-4: Fast Lane </p> </li> <li> <p>Rules micro-library  </p> </li> <li>Direct RPC endpoints  </li> <li> <p>Performance tests</p> </li> <li> <p>Week 5-6: Scribe Agent </p> </li> <li> <p>Basic CRUD operations  </p> </li> <li>Search functionality  </li> <li> <p>Integration tests</p> </li> <li> <p>Week 7-8: System Mastery </p> </li> <li> <p>Rule lookup  </p> </li> <li>Combat calculations  </li> <li> <p>Validation</p> </li> <li> <p>Week 9-10: World Designer </p> </li> <li> <p>Template-based generation  </p> </li> <li> <p>Basic room/encounter creation</p> </li> <li> <p>Week 11-12: Integration </p> </li> <li> <p>End-to-end workflows  </p> </li> <li>UI connection  </li> <li>Demo preparation</li> </ol>"},{"location":"dma-technical-design-v2/#summary-of-key-changes","title":"Summary of Key Changes","text":"<ol> <li>Replace Redis Pub/Sub \u2192 Redis Streams </li> <li>Single Database \u2192 PostgreSQL only </li> <li>Remove 6 agents \u2192 Focus on 3 </li> <li>Add Fast-Lane RPC \u2192 Sub-500ms operations </li> <li>Extract shared resilience \u2192 pip package </li> <li>Add contract testing \u2192 CI/CD requirement </li> <li>Define work tokens \u2192 Agent authentication </li> <li>Set realistic SLOs \u2192 Based on architecture </li> <li>Local deployment only \u2192 For MVC </li> <li>Split into focused docs \u2192 Max 15 pages each</li> </ol> <p>This rewrite will transform the Technical Design from an aspirational 240-page document into a pragmatic, implementable specification that can actually ship in Q3 2025.  </p>"},{"location":"orchestrator-internal-design-v1/","title":"Orchestrator Internal Design v1","text":"<p>doc_id: ADR\u2011004\u2011orchestrator title: Orchestrator Internal Design status: Review version: 0.3 last_updated: Jun 28, 2025 audience: [\"platform\u2011engineers\",\"gameplay\u2011engineers\",\"QA\",\"SRE\"] revision_history:   - {version: 0.1, date: 2025\u201106\u201128, author: JP Dow, note: \"initial draft\"}   - {version: 0.2, date: 2025\u201107\u201101, author: gemini_team,  note: \"peer\u2011review edits\"}   - {version: 0.3, date: 2025\u201107\u201101, author: claude_team,  note: \"gameplay alignment, CKB integration\"} related_docs:   - DMA\u202fTechnical\u202fDesign\u202fv2   - DMA\u202fAPI\u202fDesign Spec\u202fv2   - CKB\u202fData\u202fSchema\u202fv2   - DMA\u202fPlan\u202fv2 </p> <p>Abstract     The Orchestrator is the single async ingress for all Dungeon\u202fMaster (DM)\u2011initiated requests.    It enriches each request with gameplay context (campaign, session, DM preferences), decomposes it    into agent\u2011level tasks, enforces rate\u2011limit and resilience rules, aggregates results,    validates lore consistency, updates the Central Knowledge Base (CKB), and streams the final    response back to the UI. Two latency classes are supported: Fast\u202fLane (\\&lt;\u202f0.5\u202fs) for rule look\u2011ups and Live Play (\\&lt;\u202f2\u202fs) for reactive generation,    while longer \u201cPrep\u201d and \u201cBulk\u201d jobs run fully async.</p> <p>graph TD        subgraph UI Tier            UI[DM Interface]        end        subgraph Orchestrator            A[/REST /v1/prompts/]            B[/Fast Lane /v1/fast/*/]            ORC[Orchestrator (core)]            FL[Fast\u2011Lane Router]            CE[Context Enrichment\\&lt;br/&gt;(Session + Campaign)]        end        subgraph Bus &amp; Agents            RS((Redis Streams))            SCR[Scribe Agent]            SMA[System Mastery Agent]            WED[World Designer Agent]        end        subgraph Data Stores            PG[(PostgreSQL CKB)]            RC[(In\u2011Mem Rule Cache)]        end  </p> <pre><code>   UI \\--\\&gt;|REST JSON| A \\--\\&gt; ORC  \n   UI \\--\\&gt;|REST| B \\--\\&gt; FL \\--\\&gt; RC  \n   ORC \\--\\&gt; CE \\--\\&gt; |XADD agent\\_tasks| RS  \n   RS \\--\\&gt; SCR &amp; SMA &amp; WED  \n   SCR &amp; SMA &amp; WED \\--\\&gt;|XADD agent\\_results| ORC  \n   ORC \\--\\&gt; PG\n</code></pre> <p>#### Gameplay Content Enrichment Pipeline</p> <p>Before any task decomposition the Orchestrator calls **`SessionContextExtractor`**    to attach:  </p> Field Source Notes `campaign_id` JWT custom claim `cmp` Required `session_id` Header `X-DMA-Session` (optional) Live\u2011play only `dm_preferences` cache(`dm_prefs:{dm_id}`) TTL \\= 10 min `current_game_state` CKB read via `CampaignStateManager.get_current_session_context()` Round\u2011trip budget\u202f\u2264\u202f50\u202fms <p>If lookup fails the request is rejected with `422` **\u201cmissing campaign context\u201d**.    </p> Sub\u2011loop Concurrency primitive Typical fan\u2011out Notes FastAPI request loop <code>asyncio</code> tasks \u2264\u202f1\u202fK req/s CPU\u2011light, I/O bound Intent classifier pool <code>ThreadPoolExecutor(max_workers=4)</code> 4 Offloads HuggingFace pipeline to threads Redis Streams consumers N\u202f\u00d7\u202f<code>asyncio</code> tasks (default\u202f=\u202f6) 6 One consumer group per agent Result aggregation <code>asyncio.Queue</code> bounded (1\u202fK) Back\u2011pressure buffer Metrics flushing Background task every 5\u202fs 1 Push to Prometheus gateway <p>Design rationale: keep the whole service single\u2011process async to avoid cross\u2011process context switching while still allowing blocking ML inference to run in a confined thread pool. </p> <p>| Subsystem | Responsibility | Key Classes / Files |</p> <p>|-----------|----------------|---------------------|</p> <p>| **API Layer** | Validate &amp; auth REST + Fast\u202fLane | `entrypoints/http.py` |</p> <p>| **Context Enrichment** | Inject campaign/session state &amp; DM prefs | `services/context.py` |</p> <p>| **Intent Classifier** | Rule\u2011table lookup \u2192 local DeBERTa fallback | `services/intent.py` |</p> <p>| **Task Decomposer** | Prompt + intent \u21d2 `AgentTask[]` | `services/decompose.py` |</p> <p>| **Dispatcher** | XADD to `agent_tasks`, attach *work\u2011token* | `services/dispatcher.py` |</p> <p>| **Result Collector** | Consume `agent_results`, merge, timeout logic | `services/collector.py` |</p> <p>| **LoreConsistencyEngine** | Cross\u2011check agent outputs vs CKB | `services/lore_validator.py` |</p> <p>| **CampaignStateManager** | Persist net changes to CKB | `services/state_manager.py` |</p> <p>| **DMPreferenceManager** | Fetch &amp; cache DM overrides | `services/prefs.py` |</p> <p>| **CreativeContentValidator** | Detect narrative conflicts | `services/creative_validate.py` |</p> <p>| **Back\u2011Pressure Ctrl** | 90\u202f% util \u2192 429 &amp; metrics | `services/backpressure.py` |</p> <p>| **Observability** | Prometheus, OpenTelemetry, structlog | `instrumentation/\u2026` |</p> <p>Overflow policy: when <code>result_queue</code> is full, new tasks are not accepted;</p> <p>Orchestrator returns 429 Retry\u2011After where delay\u202f=\u202f<code>min(2\u00d7p99_latency,\u202f30\u202fs)</code>.</p> <p>This propagates back\u2011pressure to the UI tier.</p> <p>Why single\u2011process async? A fork/worker adds \\~180\u202f\u00b5s context\u2011switch latency;</p> <p>at 300\u202frps that is \\~54\u202fms P95, violating the Fast Lane SLO.</p> <p>sequenceDiagram        participant UI        participant ORC as Orchestrator        participant SCR as Scribe Agent        participant SMA as System Mastery        participant WED as World Designer        rect rgb(245,245,245)            UI-&gt;&gt;+ORC: POST /v1/prompts (Create NPC...)            ORC-&gt;&gt;ORC: deduplicate(request_id)            ORC-&gt;&gt;ORC: classify_intent()            ORC-&gt;&gt;ORC: decompose_tasks()        end        ORC--&gt;&gt;SCR: XADD agent_tasks (store entity)        ORC--&gt;&gt;SMA: XADD agent_tasks (validate THAC0)        ORC--&gt;&gt;WED: XADD agent_tasks (generate description)        SCR--&gt;&gt;ORC: XADD agent_results (success)        SMA--&gt;&gt;ORC: XADD agent_results (success)        WED--&gt;&gt;ORC: XADD agent_results (success)        ORC-&gt;&gt;ORC: aggregate_results()        ORC--&gt;&gt;UI: 200 OK (final content, entity_ids)  </p> <p>sequenceDiagram        participant ORC        participant WED        participant LORE as LoreValidator        participant UI  </p> <pre><code>   ORC-\\&gt;\\&gt;WED: XADD task.generate\\_content  \n   WED--\\&gt;\\&gt;ORC: XADD result.success (draft lore)  \n   ORC-\\&gt;\\&gt;LORE: validate\\_lore\\_consistency()  \n   LORE--\\&gt;\\&gt;ORC: conflict\\_found  \n   ORC--\\&gt;\\&gt;UI: 409 Conflict (requires DM decision)  \n   Note over ORC,LORE: Result moved to \\&lt;agent\\_results:dlq:lore\\_conflict\\&gt;\n</code></pre> <p>Retries and DLQ flows follow the simplified event schema in the protocol spec.</p> <p>-- Idempotency &amp; tracking    CREATE TABLE orchestrator_requests (      request_id UUID PRIMARY KEY,      status       TEXT CHECK (status IN ('processing','completed','error')),      prompt       TEXT,      user_id      UUID,      created_at   TIMESTAMPTZ DEFAULT now(),      completed_at TIMESTAMPTZ,      result_json  JSONB    );  </p> <p>-- Fast\u2011lane cache (warm on startup)    CREATE UNLOGGED TABLE rule_cache (      rule_key TEXT PRIMARY KEY,      payload  JSONB,      updated_at TIMESTAMPTZ    );  </p> <p>The <code>rule_cache</code> table is loaded into an in\u2011memory dict at startup and refreshed every 6\u202fh.   </p> <p>ALTER TABLE orchestrator_requests      ADD COLUMN latency_class TEXT CHECK (latency_class IN ('fast','live','prep','bulk')) DEFAULT 'live';  </p> <p>-- partial index to speed dashboard queries    CREATE INDEX idx_orc_req_campaign ON orchestrator_requests(campaign_id)      WHERE status \\= 'completed';  </p> <p><code>latency_class</code> is filled by Context Enrichment based on request type; used by SLO dashboards.</p> <p>{      \"message_type\": \"generate_npc\",      \"campaign_id\": \"cmp_123\",      \"session_id\": \"ses_456\",      \"dm_preferences\": { \"tone\": \"heroic\", \"house_rules\": [\"max_hp_first_level\"] },      \"session_context\": {        \"current_location\": \"Tavern of the Weary Traveler\",        \"party_level\": 5,        \"active_npcs\": [\"Gareth the Innkeeper\"]      },      \"requirements\": {        \"npc_role\": \"mysterious_stranger\",        \"personality_traits\": [\"secretive\", \"knowledgeable\"],        \"plot_relevance\": \"knows_about_artifact\"      }    }</p> <ol> <li> <p>Circuit Breakers wrap outbound LLM calls (<code>llm_gateway.generate</code>) and each Redis consumer loop; open after 5 failures / 60\u202fs\u202fcool\u2011down.  </p> </li> <li>Bulkhead limits max in\u2011flight tasks per agent to 50; excess tasks stay in in\u2011memory queue.  </li> <li>Retry With Jitter: exponential backoff, 3\u202fattempts on network / timeout errors only.  </li> <li>Load\u2011Shed: if <code>queue_depth &gt; 9\u202f000</code> or <code>p99_request_latency &gt; 5\u202fs</code>, return <code>429</code> with <code>Retry\u2011After</code>.  </li> <li>Built using the shared package <code>dma_shared_resilience</code> so that semantics stay consistent across agents. DMA Agent Contract Test\u2026  </li> <li>CircuitBreaker counts <code>TimeoutError | ConnectionError | LLMError</code>.  </li> <li>Bulkhead buffer capacity \\= 2\u202f000; overflow \u2192 orchestrator queue.  </li> <li>RetryWithBackoff budget: 3 attempts or 15\u202fs total, whichever first.  </li> <li> <p><code>Retry\u2011After</code> \\= <code>ceil(p99_latency \u00d7 2)</code> seconds, capped at 30.</p> </li> <li> </li> </ol> Resource Default Rationale FastAPI workers 1 (async) Avoid GIL contention, driven by asyncio Thread pool (classifier) 4 DeBERTa\u2011small \\&lt;\u202f250\u202fMB RAM Redis connection pool 20 6 consumers + spikes PostgreSQL pool 20 10 read, 10 write In\u2011memory result buffer 1\u202f024 requests Worst\u2011case 3\u2011s spike at 300\u202frps CPU / RAM 2\u202fvCPU / 4\u202fGB Fits laptop docker\u2011compose <p>These numbers should be load\u2011tested and adjusted before cloud alpha. </p> Tier Thread\u2011pool Max latency Notes Fast Lane N/A (sync lookup) 0.5\u202fs p95 In\u2011memory rule cache Live Play 4 2\u202fs p95 small content Prep 12 120\u202fs medium generation Bulk 12 streamed \u2264\u202f15\u202fmin world scaffold <ol> <li> </li> <li> <p><code>/health</code> : returns 200 if circuit\u2011breakers are CLOSED and queue depth \\&lt;\u202f80\u202f%.  </p> </li> <li><code>/metrics</code> : Prometheus scrape endpoint.</li> </ol> <p>@app.post(\"/v1/prompts/{request_id}/cancel\", status_code=202)</p> <p>async def cancel(request_id: UUID, user=Depends(verify_token)):</p> <pre><code>  await dispatcher.cancel(request\\_id, user.id)\n\n  return {\"status\": \"canceled\", \"request\\_id\": str(request\\_id)}\n</code></pre> <ul> <li> <p>Agents monitor <code>control.cancel</code> stream and fast\u2011fail.</p> </li> <li> </li> <li> </li> </ul> Day Deliverable Owner Depends On 1\u202f\u2013\u202f2 Scaffold FastAPI project, env config Platform 3\u202f\u2013\u202f4 Implement <code>IntentClassifier</code> + unit tests ML 4 SessionContextExtractor, DMPreference cache Platform Auth 5\u202f\u2013\u202f6 Build <code>Dispatcher</code> &amp; <code>Collector</code>; local Redis Streams up Platform 6 JSON Schema update incl. <code>campaign_id</code> QA 7 PostgreSQL <code>orchestrator_requests</code> table, repository DB 8 CKB write path in <code>CampaignStateManager</code> DB Day 4 8 Back\u2011pressure &amp; circuit\u2011breaker middleware Platform 9 <code>/prompts/{id}/cancel</code> + <code>control.cancel</code> topic Platform Day 6 9 <code>/health</code>, <code>/metrics</code>, basic dashboards DevOps 10 <code>Lore conflict DLQ consumer \u2192 DM alert</code> WED + UX Day 8 10 Load &amp; smoke tests (\\&lt;\u202f300\u202frps, P95\u202f\\&lt;\u202f120\u202fms Fast\u2011Lane) QA 11 ADR review, code freeze Architecture 12 Sprint demo &amp; retro All <ol> <li> </li> <li> <p>Convert this design into an ADR\u2011004\u2011orchestrator\u2011internal.md file in <code>/docs/adr/</code>.  </p> </li> <li>Produce state\u2011machine diagrams for each agent (Scribe, SMA, WED) that align with this dispatch model.  </li> <li> <p>Draft the Back\u2011Pressure Policy document describing thresholds and operator levers.</p> <p>Once those are merged, the Orchestrator epic is formally \u201cReady for Implementation.\u201d</p> </li> </ol>"},{"location":"orchestrator-internal-design-v1/#executive-summary","title":"Executive Summary","text":""},{"location":"orchestrator-internal-design-v1/#topology-diagram-mermaid","title":"Topology Diagram (Mermaid)","text":""},{"location":"orchestrator-internal-design-v1/#process-model-concurrency-strategy","title":"Process Model &amp; Concurrency Strategy","text":""},{"location":"orchestrator-internal-design-v1/#internal-subsystems","title":"Internal Subsystems","text":""},{"location":"orchestrator-internal-design-v1/#sequence-diagram-happy-path-prompt-npc-generation","title":"Sequence Diagram (happy path, prompt -&gt; NPC generation)","text":""},{"location":"orchestrator-internal-design-v1/#data-model-snippets","title":"Data Model Snippets","text":""},{"location":"orchestrator-internal-design-v1/#internal-message-bus","title":"Internal Message Bus","text":""},{"location":"orchestrator-internal-design-v1/#resilience-back-pressure-rules","title":"Resilience &amp; Back-Pressure Rules","text":""},{"location":"orchestrator-internal-design-v1/#sizing-guide-reference-local-mvc","title":"Sizing Guide (reference, local MVC)","text":""},{"location":"orchestrator-internal-design-v1/#container-entrypoint-health","title":"Container Entrypoint &amp; Health","text":"<p># orchestrator/Dockerfile FROM python:3.12-slim WORKDIR /app COPY . . RUN pip install -r requirements.txt CMD [\"uvicorn\", \"entrypoints.http:app\", \\      \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \\      \"--loop\", \"uvloop\", \"--http\", \"httptools\", \\      \"--lifespan\", \"on\"] HEALTHCHECK CMD curl -f http://localhost:8000/health || exit 1  </p>"},{"location":"orchestrator-internal-design-v1/#reference-implementation-skeleton","title":"Reference Implementation Skeleton","text":"<p># entrypoints/http.py from fastapi import FastAPI, Depends, BackgroundTasks from services.intent import IntentClassifier from services.decompose import decompose from services.dispatcher import Dispatcher from models import PromptRequest, PromptResponse  </p> <p>app \\= FastAPI(title=\"DMA Orchestrator\")  </p> <p>classifier \\= IntentClassifier() dispatcher \\= Dispatcher()  </p> <p>@app.post(\"/v1/prompts\", response_model=PromptResponse) async def handle_prompt(req: PromptRequest,                         bg: BackgroundTasks,                         user=Depends(auth.verify_token)):     if await request_store.exists(req.request_id):         return await request_store.fetch(req.request_id)   # idempotency  </p> <pre><code>intent \\= await classifier.classify(req.prompt)  \ntasks  \\= decompose(req, intent)  \nbg.add\\_task(dispatcher.enqueue, req.request\\_id, tasks)\n\nreturn PromptResponse(request\\_id=req.request\\_id,  \n                      status=\"processing\",  \n                      poll\\_url=f\"/v1/prompts/{req.request\\_id}\")\n</code></pre> <p>Full project scaffold (<code>src/</code>) is included in the attached ADR branch. </p>"},{"location":"orchestrator-internal-design-v1/#implementation-checklist-two-week-sprint","title":"Implementation Checklist (two-week sprint)","text":""},{"location":"orchestrator-internal-design-v1/#open-questions-flagged-for-adrs","title":"Open Questions (flagged for ADRs)","text":"<p>ADR\u2011008 \u2013 Gameplay Context Layer   ADR\u2011009 \u2013 Lore Validation vs Intermediate Persistence</p> <ol> <li>Do we persist intermediate task state for long\u2011running flows, or only final aggregate?  </li> <li>What is the cut\u2011over policy when Fast\u2011Lane cache is stale but DB is slow (serve last\u2011known good vs. fail\u2010open)?  </li> <li>Should token metering be enforced here or solely in the shared LLM gateway?</li> </ol>"},{"location":"orchestrator-internal-design-v1/#12-next-steps-for-the-cross-cutting-section","title":"12. Next Steps for the Cross-Cutting Section","text":""}]}